# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T12:11:13+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    RootModel,
    SecretStr,
    confloat,
    conint,
    constr,
)


class AccessDeniedException(RootModel[Any]):
    root: Any


class AccountLinked(RootModel[bool]):
    root: bool


class AckModeRetryDurationSecs(RootModel[conint(ge=0, le=604800)]):
    root: conint(ge=0, le=604800)


class AddGwMetadata(RootModel[bool]):
    root: bool


class AmazonId(RootModel[constr(max_length=2048)]):
    root: constr(max_length=2048) = Field(..., description='The Sidewalk Amazon ID.')


class AmazonResourceName(RootModel[constr(min_length=1, max_length=1011)]):
    root: constr(min_length=1, max_length=1011)


class ApId(RootModel[constr(max_length=256)]):
    root: constr(max_length=256)


class AppEui(RootModel[constr(pattern=r'[a-fA-F0-9]{16}')]):
    root: constr(pattern=r'[a-fA-F0-9]{16}')


class AppKey(RootModel[constr(pattern=r'[a-fA-F0-9]{32}')]):
    root: constr(pattern=r'[a-fA-F0-9]{32}')


class AppSKey(RootModel[constr(pattern=r'[a-fA-F0-9]{32}')]):
    root: constr(pattern=r'[a-fA-F0-9]{32}')


class AppServerPrivateKey(RootModel[SecretStr]):
    root: SecretStr


class ApplicationConfigType(Enum):
    SemtechGeolocation = 'SemtechGeolocation'


class ApplicationServerPublicKey(RootModel[SecretStr]):
    root: SecretStr


class AssociateMulticastGroupWithFuotaTaskResponse(BaseModel):
    pass


class AssociateWirelessDeviceWithFuotaTaskResponse(BaseModel):
    pass


class AssociateWirelessDeviceWithMulticastGroupResponse(BaseModel):
    pass


class AssociateWirelessDeviceWithThingResponse(BaseModel):
    pass


class AssociateWirelessGatewayWithThingResponse(BaseModel):
    pass


class AutoCreateTasks(RootModel[bool]):
    root: bool


class BCCH(RootModel[conint(ge=0, le=1023)]):
    root: conint(ge=0, le=1023)


class BSIC(RootModel[conint(ge=0, le=63)]):
    root: conint(ge=0, le=63)


class BaseLat(RootModel[confloat(ge=-90.0, le=90.0)]):
    root: confloat(ge=-90.0, le=90.0)


class BaseLng(RootModel[confloat(ge=-180.0, le=180.0)]):
    root: confloat(ge=-180.0, le=180.0)


class BaseStationId(RootModel[conint(ge=0, le=65535)]):
    root: conint(ge=0, le=65535)


class BatteryLevel(Enum):
    normal = 'normal'
    low = 'low'
    critical = 'critical'


class BeaconingDataRate(RootModel[conint(ge=0, le=15)]):
    root: conint(ge=0, le=15)


class BeaconingFrequency(RootModel[conint(ge=100000000, le=1000000000)]):
    root: conint(ge=100000000, le=1000000000)


class CancelMulticastGroupSessionRequest(BaseModel):
    pass


class CancelMulticastGroupSessionResponse(BaseModel):
    pass


class CaptureTimeAccuracy(RootModel[float]):
    root: float


class CdmaChannel(RootModel[conint(ge=0, le=4095)]):
    root: conint(ge=0, le=4095)


class CellParams(RootModel[conint(ge=0, le=127)]):
    root: conint(ge=0, le=127)


class CertificatePEM(
    RootModel[
        constr(
            pattern=r'[^-A-Za-z0-9\+/=]\|=[^=]\|=\{3,\}$\{1,4096\}',
            min_length=1,
            max_length=4096,
        )
    ]
):
    root: constr(
        pattern=r'[^-A-Za-z0-9\+/=]\|=[^=]\|=\{3,\}$\{1,4096\}',
        min_length=1,
        max_length=4096,
    )


class CertificateValue(RootModel[constr(min_length=0, max_length=2048)]):
    root: constr(min_length=0, max_length=2048) = Field(
        ..., description='Certificate value.'
    )


class ChannelMask(RootModel[constr(max_length=2048)]):
    root: constr(max_length=2048)


class ClassBTimeout(RootModel[conint(ge=0, le=1000)]):
    root: conint(ge=0, le=1000)


class ClassCTimeout(RootModel[conint(ge=0, le=1000)]):
    root: conint(ge=0, le=1000)


class ClientRequestToken(
    RootModel[constr(pattern=r'^[a-zA-Z0-9-_]+$', min_length=1, max_length=64)]
):
    root: constr(pattern=r'^[a-zA-Z0-9-_]+$', min_length=1, max_length=64) = Field(
        ...,
        description='Each resource must have a unique client request token. If you try to create a new resource with the same token as a resource that already exists, an exception occurs. If you omit this value, AWS SDKs will automatically generate a unique client request.',
    )


class ConflictException(RootModel[Any]):
    root: Any


class ConnectionStatus(Enum):
    Connected = 'Connected'
    Disconnected = 'Disconnected'


class Coordinate(RootModel[float]):
    root: float


class Crc(RootModel[conint(ge=1, le=4294967295)]):
    root: conint(ge=1, le=4294967295)


class CreatedAt(RootModel[datetime]):
    root: datetime = Field(..., description='Created at timestamp for the resource.')


class CreationDate(RootModel[datetime]):
    root: datetime


class CreationTime(RootModel[datetime]):
    root: datetime


class DakCertificateId(RootModel[constr(max_length=256)]):
    root: constr(max_length=256)


class DeleteDestinationRequest(BaseModel):
    pass


class DeleteDestinationResponse(BaseModel):
    pass


class DeleteDeviceProfileRequest(BaseModel):
    pass


class DeleteDeviceProfileResponse(BaseModel):
    pass


class DeleteFuotaTaskRequest(BaseModel):
    pass


class DeleteFuotaTaskResponse(BaseModel):
    pass


class DeleteMulticastGroupRequest(BaseModel):
    pass


class DeleteMulticastGroupResponse(BaseModel):
    pass


class DeleteNetworkAnalyzerConfigurationRequest(BaseModel):
    pass


class DeleteNetworkAnalyzerConfigurationResponse(BaseModel):
    pass


class DeleteQueuedMessagesRequest(BaseModel):
    pass


class DeleteQueuedMessagesResponse(BaseModel):
    pass


class DeleteServiceProfileRequest(BaseModel):
    pass


class DeleteServiceProfileResponse(BaseModel):
    pass


class DeleteWirelessDeviceImportTaskRequest(BaseModel):
    pass


class DeleteWirelessDeviceImportTaskResponse(BaseModel):
    pass


class DeleteWirelessDeviceRequest(BaseModel):
    pass


class DeleteWirelessDeviceResponse(BaseModel):
    pass


class DeleteWirelessGatewayRequest(BaseModel):
    pass


class DeleteWirelessGatewayResponse(BaseModel):
    pass


class DeleteWirelessGatewayTaskDefinitionRequest(BaseModel):
    pass


class DeleteWirelessGatewayTaskDefinitionResponse(BaseModel):
    pass


class DeleteWirelessGatewayTaskRequest(BaseModel):
    pass


class DeleteWirelessGatewayTaskResponse(BaseModel):
    pass


class DeregisterWirelessDeviceRequest(BaseModel):
    pass


class DeregisterWirelessDeviceResponse(BaseModel):
    pass


class Description(RootModel[constr(max_length=2048)]):
    root: constr(max_length=2048) = Field(
        ..., description='The description of the new resource.'
    )


class DestinationArn(RootModel[str]):
    root: str


class DestinationName(RootModel[constr(pattern=r'[a-zA-Z0-9-_]+', max_length=128)]):
    root: constr(pattern=r'[a-zA-Z0-9-_]+', max_length=128)


class DevAddr(RootModel[constr(pattern=r'[a-fA-F0-9]{8}')]):
    root: constr(pattern=r'[a-fA-F0-9]{8}')


class DevEui(RootModel[constr(pattern=r'[a-fA-F0-9]{16}')]):
    root: constr(pattern=r'[a-fA-F0-9]{16}')


class DevStatusReqFreq(RootModel[conint(ge=0, le=2147483647)]):
    root: conint(ge=0, le=2147483647)


class DeviceCreationFile(RootModel[constr(max_length=1024)]):
    root: constr(max_length=1024)


class DeviceCreationFileList(RootModel[List[DeviceCreationFile]]):
    root: List[DeviceCreationFile]


class DeviceName(RootModel[str]):
    root: str


class DeviceProfileArn(RootModel[str]):
    root: str


class DeviceProfileId(RootModel[constr(max_length=256)]):
    root: constr(max_length=256)


class DeviceProfileName(RootModel[constr(max_length=256)]):
    root: constr(max_length=256)


class DeviceProfileType(Enum):
    Sidewalk = 'Sidewalk'
    LoRaWAN = 'LoRaWAN'


class DeviceState(Enum):
    Provisioned = 'Provisioned'
    RegisteredNotSeen = 'RegisteredNotSeen'
    RegisteredReachable = 'RegisteredReachable'
    RegisteredUnreachable = 'RegisteredUnreachable'


class DeviceTypeId(RootModel[constr(max_length=2048)]):
    root: constr(max_length=2048)


class DisassociateAwsAccountFromPartnerAccountRequest(BaseModel):
    pass


class DisassociateAwsAccountFromPartnerAccountResponse(BaseModel):
    pass


class DisassociateMulticastGroupFromFuotaTaskRequest(BaseModel):
    pass


class DisassociateMulticastGroupFromFuotaTaskResponse(BaseModel):
    pass


class DisassociateWirelessDeviceFromFuotaTaskRequest(BaseModel):
    pass


class DisassociateWirelessDeviceFromFuotaTaskResponse(BaseModel):
    pass


class DisassociateWirelessDeviceFromMulticastGroupRequest(BaseModel):
    pass


class DisassociateWirelessDeviceFromMulticastGroupResponse(BaseModel):
    pass


class DisassociateWirelessDeviceFromThingRequest(BaseModel):
    pass


class DisassociateWirelessDeviceFromThingResponse(BaseModel):
    pass


class DisassociateWirelessGatewayFromCertificateRequest(BaseModel):
    pass


class DisassociateWirelessGatewayFromCertificateResponse(BaseModel):
    pass


class DisassociateWirelessGatewayFromThingRequest(BaseModel):
    pass


class DisassociateWirelessGatewayFromThingResponse(BaseModel):
    pass


class DlBucketSize(RootModel[conint(ge=0, le=2147483647)]):
    root: conint(ge=0, le=2147483647)


class DlClass(Enum):
    ClassB = 'ClassB'
    ClassC = 'ClassC'


class DlDr(RootModel[conint(ge=0, le=15)]):
    root: conint(ge=0, le=15) = Field(..., description='Downlink data rate.')


class DlFreq(RootModel[conint(ge=100000000, le=1000000000)]):
    root: conint(ge=100000000, le=1000000000) = Field(
        ..., description='Downlink frequency.'
    )


class DlRate(RootModel[conint(ge=0, le=2147483647)]):
    root: conint(ge=0, le=2147483647)


class DlRatePolicy(RootModel[constr(max_length=256)]):
    root: constr(max_length=256)


class Double(RootModel[float]):
    root: float


class DownlinkFrequency(RootModel[conint(ge=100000000, le=1000000000)]):
    root: conint(ge=100000000, le=1000000000)


class DownlinkMode(Enum):
    SEQUENTIAL = 'SEQUENTIAL'
    CONCURRENT = 'CONCURRENT'
    USING_UPLINK_GATEWAY = 'USING_UPLINK_GATEWAY'


class DrMax(RootModel[conint(ge=0, le=15)]):
    root: conint(ge=0, le=15)


class DrMaxBox(RootModel[conint(ge=0, le=15)]):
    root: conint(ge=0, le=15)


class DrMin(RootModel[conint(ge=0, le=15)]):
    root: conint(ge=0, le=15)


class DrMinBox(RootModel[conint(ge=0, le=15)]):
    root: conint(ge=0, le=15)


class EARFCN(RootModel[conint(ge=0, le=262143)]):
    root: conint(ge=0, le=262143)


class EndPoint(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class EutranCid(RootModel[conint(ge=0, le=268435455)]):
    root: conint(ge=0, le=268435455)


class Event(Enum):
    discovered = 'discovered'
    lost = 'lost'
    ack = 'ack'
    nack = 'nack'
    passthrough = 'passthrough'


class EventNotificationPartnerType(Enum):
    Sidewalk = 'Sidewalk'


class EventNotificationResourceType(Enum):
    SidewalkAccount = 'SidewalkAccount'
    WirelessDevice = 'WirelessDevice'
    WirelessGateway = 'WirelessGateway'


class EventNotificationTopicStatus(Enum):
    Enabled = 'Enabled'
    Disabled = 'Disabled'


class Expression(RootModel[constr(max_length=2048)]):
    root: constr(max_length=2048)


class ExpressionType(Enum):
    RuleName = 'RuleName'
    MqttTopic = 'MqttTopic'


class FCntStart(RootModel[conint(ge=0, le=65535)]):
    root: conint(ge=0, le=65535) = Field(..., description='The FCnt init value.')


class FNwkSIntKey(RootModel[constr(pattern=r'[a-fA-F0-9]{32}')]):
    root: constr(pattern=r'[a-fA-F0-9]{32}')


class FPort(RootModel[conint(ge=1, le=223)]):
    root: conint(ge=1, le=223) = Field(..., description='The Fport value.')


class FactorySupport(RootModel[bool]):
    root: bool


class Fingerprint(RootModel[SecretStr]):
    root: SecretStr


class FirmwareUpdateImage(RootModel[constr(min_length=1, max_length=4096)]):
    root: constr(min_length=1, max_length=4096) = Field(
        ...,
        description='The S3 URI points to a firmware update image that is to be used with a FUOTA task.',
    )


class FirmwareUpdateRole(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048) = Field(
        ...,
        description='The firmware update role that is to be used with a FUOTA task.',
    )


class FragmentIntervalMS(RootModel[conint(ge=1)]):
    root: conint(ge=1) = Field(
        ...,
        description="The interval of sending fragments in milliseconds. Currently the interval will be rounded to the nearest second. Note that this interval only controls the timing when the cloud sends the fragments down. The actual delay of receiving fragments at device side depends on the device's class and the communication delay with the cloud.",
    )


class FragmentSizeBytes(RootModel[conint(ge=1)]):
    root: conint(ge=1) = Field(
        ...,
        description='The size of each fragment in bytes. Currently only supported in fuota tasks with multicast groups.',
    )


class FuotaDeviceStatus(Enum):
    Initial = 'Initial'
    Package_Not_Supported = 'Package_Not_Supported'
    FragAlgo_unsupported = 'FragAlgo_unsupported'
    Not_enough_memory = 'Not_enough_memory'
    FragIndex_unsupported = 'FragIndex_unsupported'
    Wrong_descriptor = 'Wrong_descriptor'
    SessionCnt_replay = 'SessionCnt_replay'
    MissingFrag = 'MissingFrag'
    MemoryError = 'MemoryError'
    MICError = 'MICError'
    Successful = 'Successful'


class FuotaTaskArn(RootModel[constr(max_length=128)]):
    root: constr(max_length=128) = Field(..., description='The arn of a FUOTA task.')


class FuotaTaskId(RootModel[constr(max_length=256)]):
    root: constr(max_length=256) = Field(..., description='The ID of a FUOTA task.')


class FuotaTaskName(RootModel[constr(max_length=256)]):
    root: constr(max_length=256) = Field(..., description='The name of a FUOTA task.')


class FuotaTaskStatus(Enum):
    Pending = 'Pending'
    FuotaSession_Waiting = 'FuotaSession_Waiting'
    In_FuotaSession = 'In_FuotaSession'
    FuotaDone = 'FuotaDone'
    Delete_Waiting = 'Delete_Waiting'


class GPST(RootModel[float]):
    root: float


class GatewayEui(
    RootModel[
        constr(
            pattern=r'^(([0-9A-Fa-f]{2}-){7}|([0-9A-Fa-f]{2}:){7}|([0-9A-Fa-f]{2}\s){7}|([0-9A-Fa-f]{2}){7})([0-9A-Fa-f]{2})$'
        )
    ]
):
    root: constr(
        pattern=r'^(([0-9A-Fa-f]{2}-){7}|([0-9A-Fa-f]{2}:){7}|([0-9A-Fa-f]{2}\s){7}|([0-9A-Fa-f]{2}){7})([0-9A-Fa-f]{2})$'
    )


class GatewayMaxEirp(RootModel[confloat(ge=0.0, le=30.0)]):
    root: confloat(ge=0.0, le=30.0)


class GenAppKey(RootModel[constr(pattern=r'[a-fA-F0-9]{32}')]):
    root: constr(pattern=r'[a-fA-F0-9]{32}')


class GeoJsonPayload(RootModel[str]):
    root: str


class GeranCid(RootModel[conint(ge=0, le=65535)]):
    root: conint(ge=0, le=65535)


class GetDestinationRequest(BaseModel):
    pass


class GetDeviceProfileRequest(BaseModel):
    pass


class GetEventConfigurationByResourceTypesRequest(BaseModel):
    pass


class GetFuotaTaskRequest(BaseModel):
    pass


class GetLogLevelsByResourceTypesRequest(BaseModel):
    pass


class GetMulticastGroupRequest(BaseModel):
    pass


class GetMulticastGroupSessionRequest(BaseModel):
    pass


class GetNetworkAnalyzerConfigurationRequest(BaseModel):
    pass


class GetPartnerAccountRequest(BaseModel):
    pass


class GetPositionConfigurationRequest(BaseModel):
    pass


class GetPositionEstimateResponse(BaseModel):
    GeoJsonPayload_1: Optional[GeoJsonPayload] = Field(None, alias='GeoJsonPayload')


class GetPositionRequest(BaseModel):
    pass


class GetResourceEventConfigurationRequest(BaseModel):
    pass


class GetResourceLogLevelRequest(BaseModel):
    pass


class GetResourcePositionRequest(BaseModel):
    pass


class GetResourcePositionResponse(BaseModel):
    GeoJsonPayload_1: Optional[GeoJsonPayload] = Field(None, alias='GeoJsonPayload')


class GetServiceEndpointRequest(BaseModel):
    pass


class GetServiceProfileRequest(BaseModel):
    pass


class GetWirelessDeviceImportTaskRequest(BaseModel):
    pass


class GetWirelessDeviceRequest(BaseModel):
    pass


class GetWirelessDeviceStatisticsRequest(BaseModel):
    pass


class GetWirelessGatewayCertificateRequest(BaseModel):
    pass


class GetWirelessGatewayFirmwareInformationRequest(BaseModel):
    pass


class GetWirelessGatewayRequest(BaseModel):
    pass


class GetWirelessGatewayStatisticsRequest(BaseModel):
    pass


class GetWirelessGatewayTaskDefinitionRequest(BaseModel):
    pass


class GetWirelessGatewayTaskRequest(BaseModel):
    pass


class GnssNav(RootModel[constr(max_length=2048)]):
    root: constr(max_length=2048)


class GsmLocalId(BaseModel):
    Bcch: BCCH
    Bsic: BSIC


class GsmTimingAdvance(RootModel[conint(ge=0, le=63)]):
    root: conint(ge=0, le=63)


class HorizontalAccuracy(RootModel[confloat(ge=0.0)]):
    root: confloat(ge=0.0)


class HrAllowed(RootModel[bool]):
    root: bool


class IPAddress(RootModel[str]):
    root: str


class ISODateTimeString(
    RootModel[
        constr(
            pattern=r'^([\+-]?\d{4}(?!\d{2}\b))((-?)((0[1-9]|1[0-2])(\3([12]\d|0[1-9]|3[01]))?|W([0-4]\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\d|[12]\d{2}|3([0-5]\d|6[1-6])))([T\s]((([01]\d|2[0-3])((:?)[0-5]\d)?|24\:?00)([\.,]\d+(?!:))?)?(\17[0-5]\d([\.,]\d+)?)?([zZ]|([\+-])([01]\d|2[0-3]):?([0-5]\d)?)?)?)?$'
        )
    ]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(
        pattern=r'^([\+-]?\d{4}(?!\d{2}\b))((-?)((0[1-9]|1[0-2])(\3([12]\d|0[1-9]|3[01]))?|W([0-4]\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\d|[12]\d{2}|3([0-5]\d|6[1-6])))([T\s]((([01]\d|2[0-3])((:?)[0-5]\d)?|24\:?00)([\.,]\d+(?!:))?)?(\17[0-5]\d([\.,]\d+)?)?([zZ]|([\+-])([01]\d|2[0-3]):?([0-5]\d)?)?)?)?$'
    )


class Identifier(RootModel[constr(max_length=256)]):
    root: constr(max_length=256)


class IdentifierType(Enum):
    PartnerAccountId = 'PartnerAccountId'
    DevEui = 'DevEui'
    GatewayEui = 'GatewayEui'
    WirelessDeviceId = 'WirelessDeviceId'
    WirelessGatewayId = 'WirelessGatewayId'


class ImportTaskArn(RootModel[constr(max_length=128)]):
    root: constr(max_length=128)


class ImportTaskId(RootModel[constr(max_length=256)]):
    root: constr(max_length=256)


class ImportTaskStatus(Enum):
    INITIALIZING = 'INITIALIZING'
    INITIALIZED = 'INITIALIZED'
    PENDING = 'PENDING'
    COMPLETE = 'COMPLETE'
    FAILED = 'FAILED'
    DELETING = 'DELETING'


class ImportedWirelessDeviceCount(RootModel[int]):
    root: int


class Integer(RootModel[int]):
    root: int


class InternalServerException(RootModel[Any]):
    root: Any


class IotCertificateId(RootModel[constr(min_length=1, max_length=4096)]):
    root: constr(min_length=1, max_length=4096)


class Ip(BaseModel):
    IpAddress: IPAddress


class JoinEui(RootModel[constr(pattern=r'[a-fA-F0-9]{16}')]):
    root: constr(pattern=r'[a-fA-F0-9]{16}')


class JoinEuiRange(RootModel[List[JoinEui]]):
    root: List[JoinEui] = Field(
        ...,
        description='A pair of join EUI describing a range [BegEui, EndEui], both ends are inclusive.',
        max_length=2,
        min_length=2,
    )


class LAC(RootModel[conint(ge=1, le=65535)]):
    root: conint(ge=1, le=65535)


class LastUpdateTime(RootModel[datetime]):
    root: datetime


class ListDestinationsRequest(BaseModel):
    pass


class ListDeviceProfilesRequest(BaseModel):
    pass


class ListDevicesForWirelessDeviceImportTaskRequest(BaseModel):
    pass


class ListEventConfigurationsRequest(BaseModel):
    pass


class ListFuotaTasksRequest(BaseModel):
    pass


class ListMulticastGroupsByFuotaTaskRequest(BaseModel):
    pass


class ListMulticastGroupsRequest(BaseModel):
    pass


class ListNetworkAnalyzerConfigurationsRequest(BaseModel):
    pass


class ListPartnerAccountsRequest(BaseModel):
    pass


class ListPositionConfigurationsRequest(BaseModel):
    pass


class ListQueuedMessagesRequest(BaseModel):
    pass


class ListServiceProfilesRequest(BaseModel):
    pass


class ListTagsForResourceRequest(BaseModel):
    pass


class ListWirelessDeviceImportTasksRequest(BaseModel):
    pass


class ListWirelessDevicesRequest(BaseModel):
    pass


class ListWirelessGatewayTaskDefinitionsRequest(BaseModel):
    pass


class ListWirelessGatewaysRequest(BaseModel):
    pass


class LoRaWANConnectionStatusEventNotificationConfigurations(BaseModel):
    GatewayEuiEventTopic: Optional[EventNotificationTopicStatus] = None


class LoRaWANConnectionStatusResourceTypeEventConfiguration(BaseModel):
    WirelessGatewayEventTopic: Optional[EventNotificationTopicStatus] = None


class LoRaWANGatewayMetadata(BaseModel):
    GatewayEui_1: Optional[GatewayEui] = Field(None, alias='GatewayEui')
    Rssi: Optional[Double] = None
    Snr: Optional[Double] = None


class LoRaWANGatewayMetadataList(RootModel[List[LoRaWANGatewayMetadata]]):
    root: List[LoRaWANGatewayMetadata]


class LoRaWANJoinEventNotificationConfigurations(BaseModel):
    DevEuiEventTopic: Optional[EventNotificationTopicStatus] = None


class LoRaWANJoinResourceTypeEventConfiguration(BaseModel):
    WirelessDeviceEventTopic: Optional[EventNotificationTopicStatus] = None


class LoRaWANListDevice(BaseModel):
    DevEui_1: Optional[DevEui] = Field(None, alias='DevEui')


class LoRaWANMulticastMetadata(BaseModel):
    FPort_1: Optional[FPort] = Field(None, alias='FPort')


class LogLevel(Enum):
    INFO = 'INFO'
    ERROR = 'ERROR'
    DISABLED = 'DISABLED'


class LteTimingAdvance(RootModel[conint(ge=0, le=1282)]):
    root: conint(ge=0, le=1282)


class MCC(RootModel[conint(ge=200, le=999)]):
    root: conint(ge=200, le=999)


class MNC(RootModel[conint(ge=0, le=999)]):
    root: conint(ge=0, le=999)


class MacAddress(
    RootModel[
        constr(
            pattern=r'^([0-9A-Fa-f]{2}[:-]?){5}([0-9A-Fa-f]{2})$',
            min_length=12,
            max_length=17,
        )
    ]
):
    root: constr(
        pattern=r'^([0-9A-Fa-f]{2}[:-]?){5}([0-9A-Fa-f]{2})$',
        min_length=12,
        max_length=17,
    )


class MacVersion(RootModel[constr(max_length=64)]):
    root: constr(max_length=64)


class MaxAllowedSignature(RootModel[int]):
    root: int


class MaxDutyCycle(RootModel[conint(ge=0, le=100)]):
    root: conint(ge=0, le=100)


class MaxEirp(RootModel[conint(ge=0, le=15)]):
    root: conint(ge=0, le=15)


class MaxResults(RootModel[conint(ge=0, le=250)]):
    root: conint(ge=0, le=250) = Field(
        ..., description='The maximum number of results to return in this operation.'
    )


class McGroupId(RootModel[conint(ge=1, le=256)]):
    root: conint(ge=1, le=256) = Field(..., description='Id of the multicast group.')


class MessageId(RootModel[str]):
    root: str


class MessageType(Enum):
    CUSTOM_COMMAND_ID_NOTIFY = 'CUSTOM_COMMAND_ID_NOTIFY'
    CUSTOM_COMMAND_ID_GET = 'CUSTOM_COMMAND_ID_GET'
    CUSTOM_COMMAND_ID_SET = 'CUSTOM_COMMAND_ID_SET'
    CUSTOM_COMMAND_ID_RESP = 'CUSTOM_COMMAND_ID_RESP'


class MinGwDiversity(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class Model(RootModel[constr(min_length=1, max_length=4096)]):
    root: constr(min_length=1, max_length=4096)


class MulticastDeviceStatus(RootModel[constr(max_length=256)]):
    root: constr(max_length=256)


class MulticastGroupArn(RootModel[constr(max_length=128)]):
    root: constr(max_length=128) = Field(
        ..., description='The arn of the multicast group.'
    )


class MulticastGroupId(RootModel[constr(max_length=256)]):
    root: constr(max_length=256) = Field(
        ..., description='The ID of the multicast group.'
    )


class MulticastGroupMessageId(RootModel[constr(max_length=256)]):
    root: constr(max_length=256) = Field(
        ..., description='ID of a multicast group message.'
    )


class MulticastGroupName(RootModel[constr(max_length=256)]):
    root: constr(max_length=256) = Field(
        ..., description='The name of the multicast group.'
    )


class MulticastGroupStatus(RootModel[constr(max_length=256)]):
    root: constr(max_length=256) = Field(
        ..., description='The status of the multicast group.'
    )


class MulticastWirelessMetadata(BaseModel):
    LoRaWAN: Optional[LoRaWANMulticastMetadata] = None


class NRCapable(RootModel[bool]):
    root: bool


class NetId(RootModel[constr(pattern=r'[a-fA-F0-9]{6}')]):
    root: constr(pattern=r'[a-fA-F0-9]{6}') = Field(
        ..., description='LoRaWAN network ID.'
    )


class NetIdFilters(RootModel[List[NetId]]):
    root: List[NetId] = Field(
        ...,
        description='A list of NetId values that are used by LoRa gateways to filter the uplink frames.',
        max_length=10,
        min_length=0,
    )


class NetworkAnalyzerConfigurationArn(RootModel[constr(max_length=1124)]):
    root: constr(max_length=1124)


class NetworkAnalyzerConfigurationName(
    RootModel[constr(pattern=r'[a-zA-Z0-9-_]+', min_length=1, max_length=1024)]
):
    root: constr(pattern=r'[a-zA-Z0-9-_]+', min_length=1, max_length=1024) = Field(
        ..., description='Name of the network analyzer configuration.'
    )


class NetworkAnalyzerConfigurations(BaseModel):
    Arn: Optional[NetworkAnalyzerConfigurationArn] = None
    Name: Optional[NetworkAnalyzerConfigurationName] = None


class NetworkId(RootModel[conint(ge=0, le=65535)]):
    root: conint(ge=0, le=65535)


class NextToken(RootModel[constr(max_length=4096)]):
    root: constr(max_length=4096)


class NumberOfDevicesInGroup(RootModel[int]):
    root: int = Field(
        ..., description='Number of devices that are associated to the multicast group.'
    )


class NumberOfDevicesRequested(RootModel[int]):
    root: int = Field(
        ...,
        description='Number of devices that are requested to be associated with the multicast group.',
    )


class NwkGeoLoc(RootModel[bool]):
    root: bool


class NwkKey(RootModel[constr(pattern=r'[a-fA-F0-9]{32}')]):
    root: constr(pattern=r'[a-fA-F0-9]{32}')


class NwkSEncKey(RootModel[constr(pattern=r'[a-fA-F0-9]{32}')]):
    root: constr(pattern=r'[a-fA-F0-9]{32}')


class NwkSKey(RootModel[constr(pattern=r'[a-fA-F0-9]{32}')]):
    root: constr(pattern=r'[a-fA-F0-9]{32}')


class OnboardStatus(Enum):
    INITIALIZED = 'INITIALIZED'
    PENDING = 'PENDING'
    ONBOARDED = 'ONBOARDED'
    FAILED = 'FAILED'


class OnboardStatusReason(RootModel[str]):
    root: str


class OtaaV10X(BaseModel):
    AppEui_1: Optional[AppEui] = Field(None, alias='AppEui')
    AppKey_1: Optional[AppKey] = Field(None, alias='AppKey')
    GenAppKey_1: Optional[GenAppKey] = Field(None, alias='GenAppKey')


class OtaaV11(BaseModel):
    AppKey_1: Optional[AppKey] = Field(None, alias='AppKey')
    JoinEui_1: Optional[JoinEui] = Field(None, alias='JoinEui')
    NwkKey_1: Optional[NwkKey] = Field(None, alias='NwkKey')


class PCI(RootModel[conint(ge=0, le=503)]):
    root: conint(ge=0, le=503)


class PSC(RootModel[conint(ge=0, le=511)]):
    root: conint(ge=0, le=511)


class PackageVersion(RootModel[constr(min_length=1, max_length=32)]):
    root: constr(min_length=1, max_length=32)


class PartnerAccountArn(RootModel[str]):
    root: str


class PartnerAccountId(RootModel[constr(max_length=256)]):
    root: constr(max_length=256)


class PartnerType(Enum):
    Sidewalk = 'Sidewalk'


class PathLoss(RootModel[conint(ge=46, le=158)]):
    root: conint(ge=46, le=158)


class PayloadData(
    RootModel[
        constr(
            pattern=r'^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$',
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$',
        max_length=2048,
    ) = Field(
        ..., description='The binary to be sent to the end device, encoded in base64.'
    )


class PilotPower(RootModel[conint(ge=-142, le=-49)]):
    root: conint(ge=-142, le=-49)


class PingSlotDr(RootModel[conint(ge=0, le=15)]):
    root: conint(ge=0, le=15)


class PingSlotFreq(RootModel[conint(ge=1000000, le=16700000)]):
    root: conint(ge=1000000, le=16700000)


class PingSlotPeriod(RootModel[conint(ge=32, le=4096)]):
    root: conint(ge=32, le=4096)


class PnOffset(RootModel[conint(ge=0, le=511)]):
    root: conint(ge=0, le=511)


class PositionConfigurationFec(Enum):
    ROSE = 'ROSE'
    NONE = 'NONE'


class PositionConfigurationStatus(Enum):
    Enabled = 'Enabled'
    Disabled = 'Disabled'


class PositionCoordinateValue(RootModel[float]):
    root: float


class PositionResourceIdentifier(
    RootModel[
        constr(
            pattern=r'[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}'
        )
    ]
):
    root: constr(
        pattern=r'[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}'
    )


class PositionResourceType(Enum):
    WirelessDevice = 'WirelessDevice'
    WirelessGateway = 'WirelessGateway'


class PositionSolverProvider(Enum):
    Semtech = 'Semtech'


class PositionSolverType(Enum):
    GNSS = 'GNSS'


class PositionSolverVersion(RootModel[constr(min_length=0, max_length=50)]):
    root: constr(min_length=0, max_length=50)


class Positioning(BaseModel):
    ClockSync: Optional[FPort] = None
    Gnss: Optional[FPort] = None
    Stream: Optional[FPort] = None


class PositioningConfigStatus(Enum):
    Enabled = 'Enabled'
    Disabled = 'Disabled'


class PrAllowed(RootModel[bool]):
    root: bool


class PresetFreq(RootModel[conint(ge=1000000, le=16700000)]):
    root: conint(ge=1000000, le=16700000)


class PutPositionConfigurationResponse(BaseModel):
    pass


class PutResourceLogLevelRequest(BaseModel):
    LogLevel_1: LogLevel = Field(..., alias='LogLevel')


class PutResourceLogLevelResponse(BaseModel):
    pass


class QualificationStatus(RootModel[bool]):
    root: bool


class QueryString(RootModel[constr(max_length=4096)]):
    root: constr(max_length=4096) = Field(
        ...,
        description='Query string used to search for wireless devices as part of the bulk associate and disassociate process.',
    )


class RSCP(RootModel[conint(ge=-120, le=-25)]):
    root: conint(ge=-120, le=-25)


class RSRP(RootModel[conint(ge=-140, le=-44)]):
    root: conint(ge=-140, le=-44)


class RSRQ(RootModel[confloat(ge=-19.5, le=-3.0)]):
    root: confloat(ge=-19.5, le=-3.0)


class RSS(RootModel[conint(ge=-128, le=0)]):
    root: conint(ge=-128, le=0)


class RaAllowed(RootModel[bool]):
    root: bool


class RedundancyPercent(RootModel[conint(ge=0, le=100)]):
    root: conint(ge=0, le=100) = Field(
        ...,
        description='The percentage of added redundant fragments. For example, if firmware file is 100 bytes and fragment size is 10 bytes, with <code>RedundancyPercent</code> set to 50(%), the final number of encoded fragments is (100 / 10) + (100 / 10 * 50%) = 15.',
    )


class RegParamsRevision(RootModel[constr(max_length=64)]):
    root: constr(max_length=64)


class RegistrationZone(RootModel[conint(ge=0, le=4095)]):
    root: conint(ge=0, le=4095)


class ReportDevStatusBattery(RootModel[bool]):
    root: bool


class ReportDevStatusMargin(RootModel[bool]):
    root: bool


class ResetAllResourceLogLevelsRequest(BaseModel):
    pass


class ResetAllResourceLogLevelsResponse(BaseModel):
    pass


class ResetResourceLogLevelRequest(BaseModel):
    pass


class ResetResourceLogLevelResponse(BaseModel):
    pass


class ResourceIdentifier(RootModel[constr(max_length=256)]):
    root: constr(max_length=256) = Field(
        ...,
        description='The identifier of the resource. For a Wireless Device, it is the wireless device ID. For a wireless gateway, it is the wireless gateway ID.',
    )


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class ResourceType(RootModel[str]):
    root: str


class Result(RootModel[constr(max_length=2048)]):
    root: constr(max_length=2048)


class RfRegion(RootModel[constr(max_length=64)]):
    root: constr(max_length=64) = Field(
        ..., description='The frequency band (RFRegion) value.'
    )


class Role(RootModel[constr(max_length=2048)]):
    root: constr(max_length=2048)


class RoleArn(RootModel[constr(min_length=20, max_length=2048)]):
    root: constr(min_length=20, max_length=2048)


class RxDataRate2(RootModel[conint(ge=0, le=15)]):
    root: conint(ge=0, le=15)


class RxDelay1(RootModel[conint(ge=0, le=15)]):
    root: conint(ge=0, le=15)


class RxDrOffset1(RootModel[conint(ge=0, le=7)]):
    root: conint(ge=0, le=7)


class RxFreq2(RootModel[conint(ge=1000000, le=16700000)]):
    root: conint(ge=1000000, le=16700000)


class RxLevel(RootModel[conint(ge=-110, le=-25)]):
    root: conint(ge=-110, le=-25)


class SNwkSIntKey(RootModel[constr(pattern=r'[a-fA-F0-9]{32}')]):
    root: constr(pattern=r'[a-fA-F0-9]{32}')


class SemtechGnssConfiguration(BaseModel):
    Fec: PositionConfigurationFec
    Status: PositionConfigurationStatus


class SemtechGnssDetail(BaseModel):
    Fec: Optional[PositionConfigurationFec] = None
    Provider: Optional[PositionSolverProvider] = None
    Status: Optional[PositionConfigurationStatus] = None
    Type: Optional[PositionSolverType] = None


class SendDataToMulticastGroupRequest(BaseModel):
    PayloadData_1: PayloadData = Field(..., alias='PayloadData')
    WirelessMetadata: MulticastWirelessMetadata


class SendDataToMulticastGroupResponse(BaseModel):
    MessageId: Optional[MulticastGroupMessageId] = None


class SendDataToWirelessDeviceResponse(BaseModel):
    MessageId_1: Optional[MessageId] = Field(None, alias='MessageId')


class Seq(RootModel[conint(ge=0, le=16383)]):
    root: conint(ge=0, le=16383)


class ServiceProfileArn(RootModel[str]):
    root: str


class ServiceProfileId(RootModel[constr(max_length=256)]):
    root: constr(max_length=256)


class ServiceProfileName(RootModel[constr(max_length=256)]):
    root: constr(max_length=256)


class SessionKeysAbpV10X(BaseModel):
    AppSKey_1: Optional[AppSKey] = Field(None, alias='AppSKey')
    NwkSKey_1: Optional[NwkSKey] = Field(None, alias='NwkSKey')


class SessionKeysAbpV11(BaseModel):
    AppSKey_1: Optional[AppSKey] = Field(None, alias='AppSKey')
    FNwkSIntKey_1: Optional[FNwkSIntKey] = Field(None, alias='FNwkSIntKey')
    NwkSEncKey_1: Optional[NwkSEncKey] = Field(None, alias='NwkSEncKey')
    SNwkSIntKey_1: Optional[SNwkSIntKey] = Field(None, alias='SNwkSIntKey')


class SessionStartTimeTimestamp(RootModel[datetime]):
    root: datetime = Field(
        ..., description='Timestamp of when the multicast group session is to start.'
    )


class SessionTimeout(RootModel[conint(ge=60, le=172800)]):
    root: conint(ge=60, le=172800) = Field(
        ..., description='How long before a multicast group session is to timeout.'
    )


class SidewalkAccountInfo(BaseModel):
    AmazonId_1: Optional[AmazonId] = Field(None, alias='AmazonId')
    AppServerPrivateKey_1: Optional[AppServerPrivateKey] = Field(
        None, alias='AppServerPrivateKey'
    )


class SidewalkAccountInfoWithFingerprint(BaseModel):
    AmazonId_1: Optional[AmazonId] = Field(None, alias='AmazonId')
    Arn: Optional[PartnerAccountArn] = None
    Fingerprint_1: Optional[Fingerprint] = Field(None, alias='Fingerprint')


class SidewalkAccountList(RootModel[List[SidewalkAccountInfoWithFingerprint]]):
    root: List[SidewalkAccountInfoWithFingerprint]


class SidewalkCreateDeviceProfile(BaseModel):
    pass


class SidewalkCreateWirelessDevice(BaseModel):
    DeviceProfileId_1: Optional[DeviceProfileId] = Field(None, alias='DeviceProfileId')


class SidewalkDeviceMetadata(BaseModel):
    BatteryLevel_1: Optional[BatteryLevel] = Field(None, alias='BatteryLevel')
    DeviceState_1: Optional[DeviceState] = Field(None, alias='DeviceState')
    Event_1: Optional[Event] = Field(None, alias='Event')
    Rssi: Optional[Integer] = None


class SidewalkEventNotificationConfigurations(BaseModel):
    AmazonIdEventTopic: Optional[EventNotificationTopicStatus] = None


class SidewalkGetStartImportInfo(BaseModel):
    DeviceCreationFileList_1: Optional[DeviceCreationFileList] = Field(
        None, alias='DeviceCreationFileList'
    )
    Role_1: Optional[Role] = Field(None, alias='Role')


class SidewalkId(RootModel[constr(max_length=256)]):
    root: constr(max_length=256) = Field(
        ..., description='The sidewalk device identification.'
    )


class SidewalkManufacturingSn(RootModel[constr(max_length=64)]):
    root: constr(max_length=64)


class SidewalkResourceTypeEventConfiguration(BaseModel):
    WirelessDeviceEventTopic: Optional[EventNotificationTopicStatus] = None


class SidewalkSendDataToDevice(BaseModel):
    AckModeRetryDurationSecs_1: Optional[AckModeRetryDurationSecs] = Field(
        None, alias='AckModeRetryDurationSecs'
    )
    MessageType_1: Optional[MessageType] = Field(None, alias='MessageType')
    Seq_1: Optional[Seq] = Field(None, alias='Seq')


class SidewalkSingleStartImportInfo(BaseModel):
    SidewalkManufacturingSn_1: Optional[SidewalkManufacturingSn] = Field(
        None, alias='SidewalkManufacturingSn'
    )


class SidewalkStartImportInfo(BaseModel):
    DeviceCreationFile_1: Optional[DeviceCreationFile] = Field(
        None, alias='DeviceCreationFile'
    )
    Role_1: Optional[Role] = Field(None, alias='Role')


class SidewalkUpdateAccount(BaseModel):
    AppServerPrivateKey_1: Optional[AppServerPrivateKey] = Field(
        None, alias='AppServerPrivateKey'
    )


class SidewalkUpdateImportInfo(BaseModel):
    DeviceCreationFile_1: Optional[DeviceCreationFile] = Field(
        None, alias='DeviceCreationFile'
    )


class SigningAlg(Enum):
    Ed25519 = 'Ed25519'
    P256r1 = 'P256r1'


class StartBulkAssociateWirelessDeviceWithMulticastGroupResponse(BaseModel):
    pass


class StartBulkDisassociateWirelessDeviceFromMulticastGroupResponse(BaseModel):
    pass


class StartFuotaTaskResponse(BaseModel):
    pass


class StartMulticastGroupSessionResponse(BaseModel):
    pass


class StartSingleWirelessDeviceImportTaskResponse(BaseModel):
    Arn: Optional[ImportTaskArn] = None
    Id: Optional[ImportTaskId] = None


class StartTime(RootModel[datetime]):
    root: datetime = Field(..., description='Start time of a FUOTA task.')


class StartWirelessDeviceImportTaskResponse(BaseModel):
    Arn: Optional[ImportTaskArn] = None
    Id: Optional[ImportTaskId] = None


class Station(RootModel[constr(min_length=1, max_length=4096)]):
    root: constr(min_length=1, max_length=4096)


class StatusReason(RootModel[str]):
    root: str


class SubBand(RootModel[conint(ge=1, le=8)]):
    root: conint(ge=1, le=8) = Field(
        ...,
        description='A subset of supported frequency channels in a certain RFRegion.',
    )


class SubBands(RootModel[List[SubBand]]):
    root: List[SubBand] = Field(
        ...,
        description='A list of integer indicating which sub bands are supported by LoRa gateway.',
        max_length=8,
        min_length=0,
    )


class SupportedRfRegion(Enum):
    EU868 = 'EU868'
    US915 = 'US915'
    AU915 = 'AU915'
    AS923_1 = 'AS923-1'
    AS923_2 = 'AS923-2'
    AS923_3 = 'AS923-3'
    AS923_4 = 'AS923-4'
    EU433 = 'EU433'
    CN470 = 'CN470'
    CN779 = 'CN779'
    RU864 = 'RU864'
    KR920 = 'KR920'
    IN865 = 'IN865'


class Supports32BitFCnt(RootModel[bool]):
    root: bool


class SupportsClassB(RootModel[bool]):
    root: bool


class SupportsClassC(RootModel[bool]):
    root: bool


class SupportsJoin(RootModel[bool]):
    root: bool


class SystemId(RootModel[conint(ge=1, le=32767)]):
    root: conint(ge=1, le=32767)


class TAC(RootModel[conint(ge=0, le=65535)]):
    root: conint(ge=0, le=65535)


class TagKey(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=200, min_length=0)


class TagResourceResponse(BaseModel):
    pass


class TagValue(RootModel[constr(min_length=0, max_length=256)]):
    root: constr(min_length=0, max_length=256)


class TargetPer(RootModel[conint(ge=0, le=100)]):
    root: conint(ge=0, le=100)


class TdscdmaTimingAdvance(RootModel[conint(ge=0, le=1530)]):
    root: conint(ge=0, le=1530)


class TestWirelessDeviceRequest(BaseModel):
    pass


class TestWirelessDeviceResponse(BaseModel):
    Result_1: Optional[Result] = Field(None, alias='Result')


class ThingArn(RootModel[str]):
    root: str


class ThingName(RootModel[str]):
    root: str


class ThrottlingException(RootModel[Any]):
    root: Any


class TooManyTagsException(RootModel[Any]):
    root: Any


class TransmissionInterval(RootModel[conint(ge=1, le=604800)]):
    root: conint(ge=1, le=604800)


class TransmitMode(RootModel[conint(ge=0, le=1)]):
    root: conint(ge=0, le=1)


class UARFCN(RootModel[conint(ge=0, le=16383)]):
    root: conint(ge=0, le=16383)


class UARFCNDL(RootModel[conint(ge=0, le=16383)]):
    root: conint(ge=0, le=16383)


class UlBucketSize(RootModel[conint(ge=0, le=2147483647)]):
    root: conint(ge=0, le=2147483647)


class UlRate(RootModel[conint(ge=0, le=2147483647)]):
    root: conint(ge=0, le=2147483647)


class UlRatePolicy(RootModel[constr(max_length=256)]):
    root: constr(max_length=256)


class UntagResourceRequest(BaseModel):
    pass


class UntagResourceResponse(BaseModel):
    pass


class UpdateAbpV10X(BaseModel):
    FCntStart_1: Optional[FCntStart] = Field(None, alias='FCntStart')


class UpdateAbpV11(BaseModel):
    FCntStart_1: Optional[FCntStart] = Field(None, alias='FCntStart')


class UpdateDataSource(RootModel[constr(min_length=1, max_length=4096)]):
    root: constr(min_length=1, max_length=4096)


class UpdateDestinationRequest(BaseModel):
    Description_1: Optional[Description] = Field(None, alias='Description')
    Expression_1: Optional[Expression] = Field(None, alias='Expression')
    ExpressionType_1: Optional[ExpressionType] = Field(None, alias='ExpressionType')
    RoleArn_1: Optional[RoleArn] = Field(None, alias='RoleArn')


class UpdateDestinationResponse(BaseModel):
    pass


class UpdateEventConfigurationByResourceTypesResponse(BaseModel):
    pass


class UpdateFuotaTaskResponse(BaseModel):
    pass


class UpdateLogLevelsByResourceTypesResponse(BaseModel):
    pass


class UpdateMulticastGroupResponse(BaseModel):
    pass


class UpdateNetworkAnalyzerConfigurationResponse(BaseModel):
    pass


class UpdatePartnerAccountRequest(BaseModel):
    Sidewalk: SidewalkUpdateAccount


class UpdatePartnerAccountResponse(BaseModel):
    pass


class UpdatePositionResponse(BaseModel):
    pass


class UpdateResourceEventConfigurationResponse(BaseModel):
    pass


class UpdateResourcePositionRequest(BaseModel):
    GeoJsonPayload_1: Optional[GeoJsonPayload] = Field(None, alias='GeoJsonPayload')


class UpdateResourcePositionResponse(BaseModel):
    pass


class UpdateSignature(RootModel[constr(min_length=1, max_length=4096)]):
    root: constr(min_length=1, max_length=4096)


class UpdateWirelessDeviceImportTaskRequest(BaseModel):
    Sidewalk: SidewalkUpdateImportInfo


class UpdateWirelessDeviceImportTaskResponse(BaseModel):
    pass


class UpdateWirelessDeviceResponse(BaseModel):
    pass


class UpdateWirelessGatewayResponse(BaseModel):
    pass


class Use2DSolver(RootModel[bool]):
    root: bool


class UtranCid(RootModel[conint(ge=0, le=268435455)]):
    root: conint(ge=0, le=268435455)


class ValidationException(RootModel[Any]):
    root: Any


class VerticalAccuracy(RootModel[confloat(ge=0.0)]):
    root: confloat(ge=0.0)


class WcdmaLocalId(BaseModel):
    Psc: PSC
    Uarfcndl: UARFCNDL


class WcdmaNmrObj(BaseModel):
    PathLoss_1: Optional[PathLoss] = Field(None, alias='PathLoss')
    Psc: PSC
    Rscp: Optional[RSCP] = None
    Uarfcndl: UARFCNDL
    UtranCid_1: UtranCid = Field(..., alias='UtranCid')


class WiFiAccessPoint(BaseModel):
    MacAddress_1: MacAddress = Field(..., alias='MacAddress')
    Rss: RSS


class WiFiAccessPoints(RootModel[List[WiFiAccessPoint]]):
    root: List[WiFiAccessPoint]


class WirelessDeviceArn(RootModel[str]):
    root: str


class WirelessDeviceEvent(Enum):
    Join = 'Join'
    Rejoin = 'Rejoin'
    Uplink_Data = 'Uplink_Data'
    Downlink_Data = 'Downlink_Data'
    Registration = 'Registration'


class WirelessDeviceEventLogOption(BaseModel):
    Event: WirelessDeviceEvent
    LogLevel_1: LogLevel = Field(..., alias='LogLevel')


class WirelessDeviceEventLogOptionList(RootModel[List[WirelessDeviceEventLogOption]]):
    root: List[WirelessDeviceEventLogOption] = Field(
        ..., description='The list of wireless device event log options.'
    )


class WirelessDeviceFrameInfo(Enum):
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'


class WirelessDeviceId(RootModel[constr(max_length=256)]):
    root: constr(max_length=256) = Field(
        ..., description='The ID of the wireless device.'
    )


class WirelessDeviceIdType(Enum):
    WirelessDeviceId = 'WirelessDeviceId'
    DevEui = 'DevEui'
    ThingName = 'ThingName'
    SidewalkManufacturingSn = 'SidewalkManufacturingSn'


class WirelessDeviceImportTask(BaseModel):
    Arn: Optional[ImportTaskArn] = None
    CreationTime_1: Optional[CreationTime] = Field(None, alias='CreationTime')
    DestinationName_1: Optional[DestinationName] = Field(None, alias='DestinationName')
    FailedImportedDeviceCount: Optional[ImportedWirelessDeviceCount] = None
    Id: Optional[ImportTaskId] = None
    InitializedImportedDeviceCount: Optional[ImportedWirelessDeviceCount] = None
    OnboardedImportedDeviceCount: Optional[ImportedWirelessDeviceCount] = None
    PendingImportedDeviceCount: Optional[ImportedWirelessDeviceCount] = None
    Sidewalk: Optional[SidewalkGetStartImportInfo] = None
    Status: Optional[ImportTaskStatus] = None
    StatusReason_1: Optional[StatusReason] = Field(None, alias='StatusReason')


class WirelessDeviceImportTaskList(RootModel[List[WirelessDeviceImportTask]]):
    root: List[WirelessDeviceImportTask]


class WirelessDeviceList(RootModel[List[WirelessDeviceId]]):
    root: List[WirelessDeviceId] = Field(..., max_length=250, min_length=0)


class WirelessDeviceName(RootModel[constr(max_length=256)]):
    root: constr(max_length=256)


class WirelessDeviceSidewalkStatus(Enum):
    PROVISIONED = 'PROVISIONED'
    REGISTERED = 'REGISTERED'
    ACTIVATED = 'ACTIVATED'
    UNKNOWN = 'UNKNOWN'


class WirelessDeviceType(Enum):
    Sidewalk = 'Sidewalk'
    LoRaWAN = 'LoRaWAN'


class WirelessGatewayArn(RootModel[str]):
    root: str


class WirelessGatewayEvent(Enum):
    CUPS_Request = 'CUPS_Request'
    Certificate = 'Certificate'


class WirelessGatewayEventLogOption(BaseModel):
    Event: WirelessGatewayEvent
    LogLevel_1: LogLevel = Field(..., alias='LogLevel')


class WirelessGatewayEventLogOptionList(RootModel[List[WirelessGatewayEventLogOption]]):
    root: List[WirelessGatewayEventLogOption] = Field(
        ..., description='The list of wireless gateway event log options.'
    )


class WirelessGatewayId(RootModel[constr(max_length=256)]):
    root: constr(max_length=256)


class WirelessGatewayIdType(Enum):
    GatewayEui = 'GatewayEui'
    WirelessGatewayId = 'WirelessGatewayId'
    ThingName = 'ThingName'


class WirelessGatewayList(RootModel[List[WirelessGatewayId]]):
    root: List[WirelessGatewayId]


class WirelessGatewayName(RootModel[constr(max_length=256)]):
    root: constr(max_length=256)


class WirelessGatewayServiceType(Enum):
    CUPS = 'CUPS'
    LNS = 'LNS'


class WirelessGatewayTaskDefinitionArn(RootModel[str]):
    root: str


class WirelessGatewayTaskDefinitionId(
    RootModel[
        constr(
            pattern=r'[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}',
            max_length=36,
        )
    ]
):
    root: constr(
        pattern=r'[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}',
        max_length=36,
    )


class WirelessGatewayTaskDefinitionType(Enum):
    UPDATE = 'UPDATE'


class WirelessGatewayTaskName(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048)


class WirelessGatewayTaskStatus(Enum):
    PENDING = 'PENDING'
    IN_PROGRESS = 'IN_PROGRESS'
    FIRST_RETRY = 'FIRST_RETRY'
    SECOND_RETRY = 'SECOND_RETRY'
    COMPLETED = 'COMPLETED'
    FAILED = 'FAILED'


class WirelessGatewayType(Enum):
    LoRaWAN = 'LoRaWAN'


class DestinationsNamePatchRequest(BaseModel):
    Description: Optional[constr(max_length=2048)] = Field(
        None, description='The description of the new resource.'
    )
    Expression: Optional[constr(max_length=2048)] = Field(
        None, description='The new rule name or topic rule to send messages to.'
    )
    ExpressionType_1: Optional[ExpressionType] = Field(
        None,
        alias='ExpressionType',
        description='The type of value in <code>Expression</code>.',
    )
    RoleArn: Optional[constr(min_length=20, max_length=2048)] = Field(
        None, description='The ARN of the IAM Role that authorizes the destination.'
    )


class ResourceType1(Enum):
    SidewalkAccount = 'SidewalkAccount'
    WirelessDevice = 'WirelessDevice'
    WirelessGateway = 'WirelessGateway'


class ConnectionStatus1(BaseModel):
    LoRaWAN: Optional[LoRaWANConnectionStatusResourceTypeEventConfiguration] = None


class DeviceRegistrationState(BaseModel):
    Sidewalk: Optional[SidewalkResourceTypeEventConfiguration] = None


class Join(BaseModel):
    LoRaWAN: Optional[LoRaWANJoinResourceTypeEventConfiguration] = None


class MessageDeliveryStatus(BaseModel):
    Sidewalk: Optional[SidewalkResourceTypeEventConfiguration] = None


class Proximity(BaseModel):
    Sidewalk: Optional[SidewalkResourceTypeEventConfiguration] = None


class EventConfigurationsResourceTypesPatchRequest(BaseModel):
    ConnectionStatus: Optional[ConnectionStatus1] = Field(
        None,
        description='Connection status resource type event configuration object for enabling or disabling topic.',
    )
    DeviceRegistrationState_1: Optional[DeviceRegistrationState] = Field(
        None,
        alias='DeviceRegistrationState',
        description='Device registration state resource type event configuration object for enabling or disabling topic.',
    )
    Join_1: Optional[Join] = Field(
        None,
        alias='Join',
        description='Join resource type event configuration object for enabling or disabling topic.',
    )
    MessageDeliveryStatus_1: Optional[MessageDeliveryStatus] = Field(
        None,
        alias='MessageDeliveryStatus',
        description='Message delivery status resource type event configuration object for enabling or disabling relevant topic.',
    )
    Proximity_1: Optional[Proximity] = Field(
        None,
        alias='Proximity',
        description='Proximity resource type event configuration object for enabling or disabling topic.',
    )


class ConnectionStatus2(BaseModel):
    LoRaWAN: Optional[LoRaWANConnectionStatusEventNotificationConfigurations] = None
    WirelessGatewayIdEventTopic: Optional[EventNotificationTopicStatus] = None


class DeviceRegistrationState1(BaseModel):
    Sidewalk: Optional[SidewalkEventNotificationConfigurations] = None
    WirelessDeviceIdEventTopic: Optional[EventNotificationTopicStatus] = None


class Join1(BaseModel):
    LoRaWAN: Optional[LoRaWANJoinEventNotificationConfigurations] = None
    WirelessDeviceIdEventTopic: Optional[EventNotificationTopicStatus] = None


class MessageDeliveryStatus1(BaseModel):
    Sidewalk: Optional[SidewalkEventNotificationConfigurations] = None
    WirelessDeviceIdEventTopic: Optional[EventNotificationTopicStatus] = None


class Proximity1(BaseModel):
    Sidewalk: Optional[SidewalkEventNotificationConfigurations] = None
    WirelessDeviceIdEventTopic: Optional[EventNotificationTopicStatus] = None


class EventConfigurationsIdentifierIdentifierTypePatchRequest(BaseModel):
    ConnectionStatus: Optional[ConnectionStatus2] = Field(
        None,
        description='Connection status event configuration object for enabling or disabling topic.',
    )
    DeviceRegistrationState: Optional[DeviceRegistrationState1] = Field(
        None,
        description='Device registration state event configuration object for enabling and disabling relevant topics.',
    )
    Join: Optional[Join1] = Field(
        None,
        description='Join event configuration object for enabling or disabling topic.',
    )
    MessageDeliveryStatus: Optional[MessageDeliveryStatus1] = Field(
        None,
        description='Message delivery status event configuration object for enabling and disabling relevant topics.',
    )
    Proximity: Optional[Proximity1] = Field(
        None,
        description='Proximity event configuration object for enabling and disabling relevant topics.',
    )


class LoRaWAN1(BaseModel):
    RfRegion: Optional[SupportedRfRegion] = None


class FuotaTasksIdPatchRequest(BaseModel):
    Description: Optional[constr(max_length=2048)] = Field(
        None, description='The description of the new resource.'
    )
    FirmwareUpdateImage: Optional[constr(min_length=1, max_length=4096)] = Field(
        None,
        description='The S3 URI points to a firmware update image that is to be used with a FUOTA task.',
    )
    FirmwareUpdateRole: Optional[constr(min_length=1, max_length=2048)] = Field(
        None,
        description='The firmware update role that is to be used with a FUOTA task.',
    )
    FragmentIntervalMS: Optional[conint(ge=1)] = Field(
        None,
        description="The interval of sending fragments in milliseconds. Currently the interval will be rounded to the nearest second. Note that this interval only controls the timing when the cloud sends the fragments down. The actual delay of receiving fragments at device side depends on the device's class and the communication delay with the cloud.",
    )
    FragmentSizeBytes: Optional[conint(ge=1)] = Field(
        None,
        description='The size of each fragment in bytes. Currently only supported in fuota tasks with multicast groups.',
    )
    LoRaWAN: Optional[LoRaWAN1] = Field(
        None, description='The LoRaWAN information used with a FUOTA task.'
    )
    Name: Optional[constr(max_length=256)] = Field(
        None, description='The name of a FUOTA task.'
    )
    RedundancyPercent: Optional[conint(ge=0, le=100)] = Field(
        None,
        description='The percentage of added redundant fragments. For example, if firmware file is 100 bytes and fragment size is 10 bytes, with <code>RedundancyPercent</code> set to 50(%), the final number of encoded fragments is (100 / 10) + (100 / 10 * 50%) = 15.',
    )


class LoRaWAN3(BaseModel):
    StartTime_1: Optional[StartTime] = Field(None, alias='StartTime')


class FuotaTasksIdPutRequest(BaseModel):
    LoRaWAN: Optional[LoRaWAN3] = Field(
        None, description='The LoRaWAN information used to start a FUOTA task.'
    )


class FuotaTasksIdMulticastGroupPutRequest(BaseModel):
    MulticastGroupId: constr(max_length=256) = Field(
        ..., description='The ID of the multicast group.'
    )


class FuotaTasksIdWirelessDevicePutRequest(BaseModel):
    WirelessDeviceId: constr(max_length=256) = Field(
        ..., description='The ID of the wireless device.'
    )


class DefaultLogLevel(Enum):
    INFO = 'INFO'
    ERROR = 'ERROR'
    DISABLED = 'DISABLED'


class LogLevelsResourceIdentifierResourceTypePutRequest(BaseModel):
    LogLevel_1: LogLevel = Field(
        ...,
        alias='LogLevel',
        description='The log level for a log message. The log levels can be disabled, or set to <code>ERROR</code> to display less verbose logs containing only error information, or to <code>INFO</code> for more detailed logs.',
    )


class LoRaWAN4(BaseModel):
    DlClass_1: Optional[DlClass] = Field(None, alias='DlClass')
    RfRegion: Optional[SupportedRfRegion] = None


class MulticastGroupsIdPatchRequest(BaseModel):
    Description: Optional[constr(max_length=2048)] = Field(
        None, description='The description of the new resource.'
    )
    LoRaWAN: Optional[LoRaWAN4] = Field(
        None,
        description='The LoRaWAN information that is to be used with the multicast group.',
    )
    Name: Optional[constr(max_length=256)] = Field(
        None, description='The name of the multicast group.'
    )


class WirelessMetadata1(BaseModel):
    LoRaWAN: Optional[LoRaWANMulticastMetadata] = None


class MulticastGroupsIdDataPostRequest(BaseModel):
    PayloadData: constr(
        pattern=r'^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$',
        max_length=2048,
    ) = Field(
        ..., description='The binary to be sent to the end device, encoded in base64.'
    )
    WirelessMetadata: WirelessMetadata1 = Field(
        ..., description='Wireless metadata that is to be sent to multicast group.'
    )


class LoRaWAN6(BaseModel):
    DlDr_1: Optional[DlDr] = Field(None, alias='DlDr')
    DlFreq_1: Optional[DlFreq] = Field(None, alias='DlFreq')
    PingSlotPeriod_1: Optional[PingSlotPeriod] = Field(None, alias='PingSlotPeriod')
    SessionStartTime: Optional[SessionStartTimeTimestamp] = None
    SessionTimeout_1: Optional[SessionTimeout] = Field(None, alias='SessionTimeout')


class MulticastGroupsIdSessionPutRequest(BaseModel):
    LoRaWAN: LoRaWAN6 = Field(
        ..., description='The LoRaWAN information used with the multicast session.'
    )


class MulticastGroupsIdWirelessDevicePutRequest(BaseModel):
    WirelessDeviceId: constr(max_length=256) = Field(
        ..., description='The ID of the wireless device.'
    )


class TraceContent(BaseModel):
    LogLevel_1: Optional[LogLevel] = Field(None, alias='LogLevel')
    WirelessDeviceFrameInfo_1: Optional[WirelessDeviceFrameInfo] = Field(
        None, alias='WirelessDeviceFrameInfo'
    )


class NetworkAnalyzerConfigurationsConfigurationNamePatchRequest(BaseModel):
    Description: Optional[constr(max_length=2048)] = Field(
        None, description='The description of the new resource.'
    )
    TraceContent_1: Optional[TraceContent] = Field(
        None,
        alias='TraceContent',
        description='Trace content for your wireless gateway and wireless device resources.',
    )
    WirelessDevicesToAdd: Optional[List[WirelessDeviceId]] = Field(
        None,
        description='Wireless device resources to add to the network analyzer configuration. Provide the <code>WirelessDeviceId</code> of the resource to add in the input array.',
        max_length=250,
        min_length=0,
    )
    WirelessDevicesToRemove: Optional[List[WirelessDeviceId]] = Field(
        None,
        description='Wireless device resources to remove from the network analyzer configuration. Provide the <code>WirelessDeviceId</code> of the resources to remove in the input array.',
        max_length=250,
        min_length=0,
    )
    WirelessGatewaysToAdd: Optional[List[WirelessGatewayId]] = Field(
        None,
        description='Wireless gateway resources to add to the network analyzer configuration. Provide the <code>WirelessGatewayId</code> of the resource to add in the input array.',
    )
    WirelessGatewaysToRemove: Optional[List[WirelessGatewayId]] = Field(
        None,
        description='Wireless gateway resources to remove from the network analyzer configuration. Provide the <code>WirelessGatewayId</code> of the resources to remove in the input array.',
    )


class Sidewalk(BaseModel):
    AmazonId_1: Optional[AmazonId] = Field(None, alias='AmazonId')
    AppServerPrivateKey_1: Optional[AppServerPrivateKey] = Field(
        None, alias='AppServerPrivateKey'
    )


class Sidewalk1(BaseModel):
    AppServerPrivateKey_1: Optional[AppServerPrivateKey] = Field(
        None, alias='AppServerPrivateKey'
    )


class PartnerAccountsPartnerAccountIdPartnerTypePatchRequest(BaseModel):
    Sidewalk: Sidewalk1 = Field(..., description='Sidewalk update.')


class ResourceType3(Enum):
    WirelessDevice = 'WirelessDevice'
    WirelessGateway = 'WirelessGateway'


class Solvers(BaseModel):
    SemtechGnss: Optional[SemtechGnssConfiguration] = None


class PositionConfigurationsResourceIdentifierResourceTypePutRequest(BaseModel):
    Destination: Optional[constr(pattern=r'[a-zA-Z0-9-_]+', max_length=128)] = Field(
        None,
        description="The position data destination that describes the AWS IoT rule that processes the device's position data for use by AWS IoT Core for LoRaWAN.",
    )
    Solvers_1: Optional[Solvers] = Field(
        None,
        alias='Solvers',
        description='The wrapper for position solver configurations.',
    )


class Ip1(BaseModel):
    IpAddress: Optional[IPAddress] = None


class PositionsResourceIdentifierResourceTypePatchRequest(BaseModel):
    Position: List[PositionCoordinateValue] = Field(
        ..., description='The position information of the resource.'
    )


class ResourcePositionsResourceIdentifierResourceTypePatchRequest(BaseModel):
    GeoJsonPayload: Optional[str] = Field(
        None,
        description='The position information of the resource, displayed as a JSON payload. The payload uses the GeoJSON format, which a format that\'s used to encode geographic data structures. For more information, see <a href="https://geojson.org/">GeoJSON</a>.',
    )


class ServiceType(Enum):
    CUPS = 'CUPS'
    LNS = 'LNS'


class LoRaWAN7(BaseModel):
    AddGwMetadata_1: Optional[AddGwMetadata] = Field(None, alias='AddGwMetadata')
    DrMax: Optional[DrMaxBox] = None
    DrMin: Optional[DrMinBox] = None
    PrAllowed_1: Optional[PrAllowed] = Field(None, alias='PrAllowed')
    RaAllowed_1: Optional[RaAllowed] = Field(None, alias='RaAllowed')


class TagKeys(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=200, min_length=0)


class Positioning1(Enum):
    Enabled = 'Enabled'
    Disabled = 'Disabled'


class Sidewalk2(BaseModel):
    DeviceProfileId_1: Optional[DeviceProfileId] = Field(None, alias='DeviceProfileId')


class Type(Enum):
    Sidewalk = 'Sidewalk'
    LoRaWAN = 'LoRaWAN'


class IdentifierType5(Enum):
    WirelessDeviceId = 'WirelessDeviceId'
    DevEui = 'DevEui'
    ThingName = 'ThingName'
    SidewalkManufacturingSn = 'SidewalkManufacturingSn'


class WirelessDevicesIdThingPutRequest(BaseModel):
    ThingArn: str = Field(
        ..., description='The ARN of the thing to associate with the wireless device.'
    )


class TaskDefinitionType(Enum):
    UPDATE = 'UPDATE'


class IdentifierType7(Enum):
    GatewayEui = 'GatewayEui'
    WirelessGatewayId = 'WirelessGatewayId'
    ThingName = 'ThingName'


class WirelessGatewaysIdPatchRequest(BaseModel):
    Description: Optional[constr(max_length=2048)] = Field(
        None, description='The description of the new resource.'
    )
    JoinEuiFilters: Optional[List[JoinEuiRange]] = Field(
        None,
        description='A list of JoinEuiRange used by LoRa gateways to filter LoRa frames.',
        max_length=3,
        min_length=0,
    )
    MaxEirp: Optional[confloat(ge=0.0, le=30.0)] = Field(
        None, description='The MaxEIRP value.'
    )
    Name: Optional[constr(max_length=256)] = Field(
        None, description='The new name of the resource.'
    )
    NetIdFilters: Optional[List[NetId]] = Field(
        None,
        description='A list of NetId values that are used by LoRa gateways to filter the uplink frames.',
        max_length=10,
        min_length=0,
    )


class WirelessGatewaysIdCertificatePutRequest(BaseModel):
    IotCertificateId: constr(min_length=1, max_length=4096) = Field(
        ...,
        description='The ID of the certificate to associate with the wireless gateway.',
    )


class WirelessGatewaysIdTasksPostRequest(BaseModel):
    WirelessGatewayTaskDefinitionId: constr(
        pattern=r'[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}',
        max_length=36,
    ) = Field(..., description='The ID of the WirelessGatewayTaskDefinition.')


class WirelessGatewaysIdThingPutRequest(BaseModel):
    ThingArn: str = Field(
        ..., description='The ARN of the thing to associate with the wireless gateway.'
    )


class Sidewalk3(BaseModel):
    DeviceCreationFile_1: Optional[DeviceCreationFile] = Field(
        None, alias='DeviceCreationFile'
    )
    Role_1: Optional[Role] = Field(None, alias='Role')


class Status(Enum):
    INITIALIZED = 'INITIALIZED'
    PENDING = 'PENDING'
    ONBOARDED = 'ONBOARDED'
    FAILED = 'FAILED'


class Sidewalk4(BaseModel):
    DeviceCreationFile_1: Optional[DeviceCreationFile] = Field(
        None, alias='DeviceCreationFile'
    )


class WirelessDeviceImportTaskIdPatchRequest(BaseModel):
    Sidewalk: Sidewalk4 = Field(
        ..., description='Sidewalk object information for updating an import task.'
    )


class Sidewalk5(BaseModel):
    SidewalkManufacturingSn_1: Optional[SidewalkManufacturingSn] = Field(
        None, alias='SidewalkManufacturingSn'
    )


class AbpV10X(BaseModel):
    DevAddr_1: Optional[DevAddr] = Field(None, alias='DevAddr')
    FCntStart_1: Optional[FCntStart] = Field(None, alias='FCntStart')
    SessionKeys: Optional[SessionKeysAbpV10X] = None


class AbpV11(BaseModel):
    DevAddr_1: Optional[DevAddr] = Field(None, alias='DevAddr')
    FCntStart_1: Optional[FCntStart] = Field(None, alias='FCntStart')
    SessionKeys: Optional[SessionKeysAbpV11] = None


class Accuracy(BaseModel):
    HorizontalAccuracy_1: Optional[HorizontalAccuracy] = Field(
        None, alias='HorizontalAccuracy'
    )
    VerticalAccuracy_1: Optional[VerticalAccuracy] = Field(
        None, alias='VerticalAccuracy'
    )


class ApplicationConfig(BaseModel):
    DestinationName_1: Optional[DestinationName] = Field(None, alias='DestinationName')
    FPort_1: Optional[FPort] = Field(None, alias='FPort')
    Type: Optional[ApplicationConfigType] = None


class Applications(RootModel[List[ApplicationConfig]]):
    root: List[ApplicationConfig]


class AssistPosition(RootModel[List[Coordinate]]):
    root: List[Coordinate] = Field(..., max_length=2, min_length=2)


class AssociateAwsAccountWithPartnerAccountResponse(BaseModel):
    Arn: Optional[PartnerAccountArn] = None
    Sidewalk: Optional[SidewalkAccountInfo] = None


class AssociateMulticastGroupWithFuotaTaskRequest(BaseModel):
    MulticastGroupId_1: MulticastGroupId = Field(..., alias='MulticastGroupId')


class AssociateWirelessDeviceWithFuotaTaskRequest(BaseModel):
    WirelessDeviceId_1: WirelessDeviceId = Field(..., alias='WirelessDeviceId')


class AssociateWirelessDeviceWithMulticastGroupRequest(BaseModel):
    WirelessDeviceId_1: WirelessDeviceId = Field(..., alias='WirelessDeviceId')


class AssociateWirelessDeviceWithThingRequest(BaseModel):
    ThingArn_1: ThingArn = Field(..., alias='ThingArn')


class AssociateWirelessGatewayWithCertificateRequest(BaseModel):
    IotCertificateId_1: IotCertificateId = Field(..., alias='IotCertificateId')


class AssociateWirelessGatewayWithCertificateResponse(BaseModel):
    IotCertificateId_1: Optional[IotCertificateId] = Field(
        None, alias='IotCertificateId'
    )


class AssociateWirelessGatewayWithThingRequest(BaseModel):
    ThingArn_1: ThingArn = Field(..., alias='ThingArn')


class BeaconingFrequencies(RootModel[List[BeaconingFrequency]]):
    root: List[BeaconingFrequency] = Field(..., max_length=10, min_length=0)


class CdmaLocalId(BaseModel):
    CdmaChannel_1: CdmaChannel = Field(..., alias='CdmaChannel')
    PnOffset_1: PnOffset = Field(..., alias='PnOffset')


class CdmaNmrObj(BaseModel):
    BaseStationId_1: Optional[BaseStationId] = Field(None, alias='BaseStationId')
    CdmaChannel_1: CdmaChannel = Field(..., alias='CdmaChannel')
    PilotPower_1: Optional[PilotPower] = Field(None, alias='PilotPower')
    PnOffset_1: PnOffset = Field(..., alias='PnOffset')


class CertificateList(BaseModel):
    SigningAlg_1: SigningAlg = Field(..., alias='SigningAlg')
    Value: CertificateValue


class ConnectionStatusEventConfiguration(BaseModel):
    LoRaWAN: Optional[LoRaWANConnectionStatusEventNotificationConfigurations] = None
    WirelessGatewayIdEventTopic: Optional[EventNotificationTopicStatus] = None


class ConnectionStatusResourceTypeEventConfiguration(BaseModel):
    LoRaWAN: Optional[LoRaWANConnectionStatusResourceTypeEventConfiguration] = None


class CreateDestinationResponse(BaseModel):
    Arn: Optional[DestinationArn] = None
    Name: Optional[DestinationName] = None


class CreateDeviceProfileResponse(BaseModel):
    Arn: Optional[DeviceProfileArn] = None
    Id: Optional[DeviceProfileId] = None


class CreateFuotaTaskResponse(BaseModel):
    Arn: Optional[FuotaTaskArn] = None
    Id: Optional[FuotaTaskId] = None


class CreateMulticastGroupResponse(BaseModel):
    Arn: Optional[MulticastGroupArn] = None
    Id: Optional[MulticastGroupId] = None


class CreateNetworkAnalyzerConfigurationResponse(BaseModel):
    Arn: Optional[NetworkAnalyzerConfigurationArn] = None
    Name: Optional[NetworkAnalyzerConfigurationName] = None


class CreateServiceProfileResponse(BaseModel):
    Arn: Optional[ServiceProfileArn] = None
    Id: Optional[ServiceProfileId] = None


class CreateWirelessDeviceResponse(BaseModel):
    Arn: Optional[WirelessDeviceArn] = None
    Id: Optional[WirelessDeviceId] = None


class CreateWirelessGatewayResponse(BaseModel):
    Arn: Optional[WirelessGatewayArn] = None
    Id: Optional[WirelessDeviceId] = None


class CreateWirelessGatewayTaskDefinitionResponse(BaseModel):
    Arn: Optional[WirelessGatewayTaskDefinitionArn] = None
    Id: Optional[WirelessGatewayTaskDefinitionId] = None


class CreateWirelessGatewayTaskRequest(BaseModel):
    WirelessGatewayTaskDefinitionId_1: WirelessGatewayTaskDefinitionId = Field(
        ..., alias='WirelessGatewayTaskDefinitionId'
    )


class CreateWirelessGatewayTaskResponse(BaseModel):
    Status: Optional[WirelessGatewayTaskStatus] = None
    WirelessGatewayTaskDefinitionId_1: Optional[WirelessGatewayTaskDefinitionId] = (
        Field(None, alias='WirelessGatewayTaskDefinitionId')
    )


class DakCertificateMetadata(BaseModel):
    ApId_1: Optional[ApId] = Field(None, alias='ApId')
    CertificateId: DakCertificateId
    DeviceTypeId_1: Optional[DeviceTypeId] = Field(None, alias='DeviceTypeId')
    FactorySupport_1: Optional[FactorySupport] = Field(None, alias='FactorySupport')
    MaxAllowedSignature_1: Optional[MaxAllowedSignature] = Field(
        None, alias='MaxAllowedSignature'
    )


class DakCertificateMetadataList(RootModel[List[DakCertificateMetadata]]):
    root: List[DakCertificateMetadata]


class Destinations(BaseModel):
    Arn: Optional[DestinationArn] = None
    Description_1: Optional[Description] = Field(None, alias='Description')
    Expression_1: Optional[Expression] = Field(None, alias='Expression')
    ExpressionType_1: Optional[ExpressionType] = Field(None, alias='ExpressionType')
    Name: Optional[DestinationName] = None
    RoleArn_1: Optional[RoleArn] = Field(None, alias='RoleArn')


class DeviceCertificateList(RootModel[List[CertificateList]]):
    root: List[CertificateList] = Field(
        ..., description='List of device certificate chain.'
    )


class DeviceProfile(BaseModel):
    Arn: Optional[DeviceProfileArn] = None
    Id: Optional[DeviceProfileId] = None
    Name: Optional[DeviceProfileName] = None


class DeviceProfileList(RootModel[List[DeviceProfile]]):
    root: List[DeviceProfile]


class DeviceRegistrationStateEventConfiguration(BaseModel):
    Sidewalk: Optional[SidewalkEventNotificationConfigurations] = None
    WirelessDeviceIdEventTopic: Optional[EventNotificationTopicStatus] = None


class DeviceRegistrationStateResourceTypeEventConfiguration(BaseModel):
    Sidewalk: Optional[SidewalkResourceTypeEventConfiguration] = None


class FPorts(BaseModel):
    Applications_1: Optional[Applications] = Field(None, alias='Applications')
    ClockSync: Optional[FPort] = None
    Fuota: Optional[FPort] = None
    Multicast: Optional[FPort] = None
    Positioning_1: Optional[Positioning] = Field(None, alias='Positioning')


class FactoryPresetFreqsList(RootModel[List[PresetFreq]]):
    root: List[PresetFreq] = Field(..., max_length=20, min_length=0)


class FuotaTask(BaseModel):
    Arn: Optional[FuotaTaskArn] = None
    Id: Optional[FuotaTaskId] = None
    Name: Optional[FuotaTaskName] = None


class FuotaTaskList(RootModel[List[FuotaTask]]):
    root: List[FuotaTask] = Field(
        ..., description='Lists the FUOTA tasks registered to your AWS account.'
    )


class GatewayListItem(BaseModel):
    DownlinkFrequency_1: DownlinkFrequency = Field(..., alias='DownlinkFrequency')
    GatewayId: WirelessGatewayId


class GetDestinationResponse(BaseModel):
    Arn: Optional[DestinationArn] = None
    Description_1: Optional[Description] = Field(None, alias='Description')
    Expression_1: Optional[Expression] = Field(None, alias='Expression')
    ExpressionType_1: Optional[ExpressionType] = Field(None, alias='ExpressionType')
    Name: Optional[DestinationName] = None
    RoleArn_1: Optional[RoleArn] = Field(None, alias='RoleArn')


class GetPartnerAccountResponse(BaseModel):
    AccountLinked_1: Optional[AccountLinked] = Field(None, alias='AccountLinked')
    Sidewalk: Optional[SidewalkAccountInfoWithFingerprint] = None


class GetResourceLogLevelResponse(BaseModel):
    LogLevel_1: Optional[LogLevel] = Field(None, alias='LogLevel')


class GetServiceEndpointResponse(BaseModel):
    ServerTrust: Optional[CertificatePEM] = None
    ServiceEndpoint: Optional[EndPoint] = None
    ServiceType: Optional[WirelessGatewayServiceType] = None


class GetWirelessDeviceImportTaskResponse(BaseModel):
    Arn: Optional[ImportTaskArn] = None
    CreationTime_1: Optional[CreationTime] = Field(None, alias='CreationTime')
    DestinationName_1: Optional[DestinationName] = Field(None, alias='DestinationName')
    FailedImportedDeviceCount: Optional[ImportedWirelessDeviceCount] = None
    Id: Optional[ImportTaskId] = None
    InitializedImportedDeviceCount: Optional[ImportedWirelessDeviceCount] = None
    OnboardedImportedDeviceCount: Optional[ImportedWirelessDeviceCount] = None
    PendingImportedDeviceCount: Optional[ImportedWirelessDeviceCount] = None
    Sidewalk: Optional[SidewalkGetStartImportInfo] = None
    Status: Optional[ImportTaskStatus] = None
    StatusReason_1: Optional[StatusReason] = Field(None, alias='StatusReason')


class GetWirelessGatewayCertificateResponse(BaseModel):
    IotCertificateId_1: Optional[IotCertificateId] = Field(
        None, alias='IotCertificateId'
    )
    LoRaWANNetworkServerCertificateId: Optional[IotCertificateId] = None


class GetWirelessGatewayStatisticsResponse(BaseModel):
    ConnectionStatus_1: Optional[ConnectionStatus] = Field(
        None, alias='ConnectionStatus'
    )
    LastUplinkReceivedAt: Optional[ISODateTimeString] = None
    WirelessGatewayId_1: Optional[WirelessGatewayId] = Field(
        None, alias='WirelessGatewayId'
    )


class GetWirelessGatewayTaskResponse(BaseModel):
    LastUplinkReceivedAt: Optional[ISODateTimeString] = None
    Status: Optional[WirelessGatewayTaskStatus] = None
    TaskCreatedAt: Optional[ISODateTimeString] = None
    WirelessGatewayId_1: Optional[WirelessGatewayId] = Field(
        None, alias='WirelessGatewayId'
    )
    WirelessGatewayTaskDefinitionId_1: Optional[WirelessGatewayTaskDefinitionId] = (
        Field(None, alias='WirelessGatewayTaskDefinitionId')
    )


class GlobalIdentity(BaseModel):
    GeranCid_1: GeranCid = Field(..., alias='GeranCid')
    Lac: LAC


class Gnss(BaseModel):
    AssistAltitude: Optional[Coordinate] = None
    AssistPosition_1: Optional[AssistPosition] = Field(None, alias='AssistPosition')
    CaptureTime: Optional[GPST] = None
    CaptureTimeAccuracy_1: Optional[CaptureTimeAccuracy] = Field(
        None, alias='CaptureTimeAccuracy'
    )
    Payload: GnssNav
    Use2DSolver_1: Optional[Use2DSolver] = Field(None, alias='Use2DSolver')


class GsmNmrObj(BaseModel):
    Bcch: BCCH
    Bsic: BSIC
    GlobalIdentity_1: Optional[GlobalIdentity] = Field(None, alias='GlobalIdentity')
    RxLevel_1: Optional[RxLevel] = Field(None, alias='RxLevel')


class ImportedSidewalkDevice(BaseModel):
    LastUpdateTime_1: Optional[LastUpdateTime] = Field(None, alias='LastUpdateTime')
    OnboardingStatus: Optional[OnboardStatus] = None
    OnboardingStatusReason: Optional[OnboardStatusReason] = None
    SidewalkManufacturingSn_1: Optional[SidewalkManufacturingSn] = Field(
        None, alias='SidewalkManufacturingSn'
    )


class ImportedWirelessDevice(BaseModel):
    Sidewalk: Optional[ImportedSidewalkDevice] = None


class ImportedWirelessDeviceList(RootModel[List[ImportedWirelessDevice]]):
    root: List[ImportedWirelessDevice]


class JoinEuiFilters(RootModel[List[JoinEuiRange]]):
    root: List[JoinEuiRange] = Field(
        ...,
        description='A list of JoinEuiRange used by LoRa gateways to filter LoRa frames.',
        max_length=3,
        min_length=0,
    )


class JoinEventConfiguration(BaseModel):
    LoRaWAN: Optional[LoRaWANJoinEventNotificationConfigurations] = None
    WirelessDeviceIdEventTopic: Optional[EventNotificationTopicStatus] = None


class JoinResourceTypeEventConfiguration(BaseModel):
    LoRaWAN: Optional[LoRaWANJoinResourceTypeEventConfiguration] = None


class ListDeviceProfilesResponse(BaseModel):
    DeviceProfileList_1: Optional[DeviceProfileList] = Field(
        None, alias='DeviceProfileList'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListDevicesForWirelessDeviceImportTaskResponse(BaseModel):
    DestinationName_1: Optional[DestinationName] = Field(None, alias='DestinationName')
    ImportedWirelessDeviceList_1: Optional[ImportedWirelessDeviceList] = Field(
        None, alias='ImportedWirelessDeviceList'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListFuotaTasksResponse(BaseModel):
    FuotaTaskList_1: Optional[FuotaTaskList] = Field(None, alias='FuotaTaskList')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListPartnerAccountsResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Sidewalk: Optional[SidewalkAccountList] = None


class ListWirelessDeviceImportTasksResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    WirelessDeviceImportTaskList_1: Optional[WirelessDeviceImportTaskList] = Field(
        None, alias='WirelessDeviceImportTaskList'
    )


class LoRaWANDevice(BaseModel):
    AbpV1_0_x: Optional[AbpV10X] = None
    AbpV1_1: Optional[AbpV11] = None
    DevEui_1: Optional[DevEui] = Field(None, alias='DevEui')
    DeviceProfileId_1: Optional[DeviceProfileId] = Field(None, alias='DeviceProfileId')
    FPorts_1: Optional[FPorts] = Field(None, alias='FPorts')
    OtaaV1_0_x: Optional[OtaaV10X] = None
    OtaaV1_1: Optional[OtaaV11] = None
    ServiceProfileId_1: Optional[ServiceProfileId] = Field(
        None, alias='ServiceProfileId'
    )


class LoRaWANDeviceMetadata(BaseModel):
    DataRate: Optional[Integer] = None
    DevEui_1: Optional[DevEui] = Field(None, alias='DevEui')
    FPort: Optional[Integer] = None
    Frequency: Optional[Integer] = None
    Gateways: Optional[LoRaWANGatewayMetadataList] = None
    Timestamp: Optional[ISODateTimeString] = None


class LoRaWANDeviceProfile(BaseModel):
    ClassBTimeout_1: Optional[ClassBTimeout] = Field(None, alias='ClassBTimeout')
    ClassCTimeout_1: Optional[ClassCTimeout] = Field(None, alias='ClassCTimeout')
    FactoryPresetFreqsList_1: Optional[FactoryPresetFreqsList] = Field(
        None, alias='FactoryPresetFreqsList'
    )
    MacVersion_1: Optional[MacVersion] = Field(None, alias='MacVersion')
    MaxDutyCycle_1: Optional[MaxDutyCycle] = Field(None, alias='MaxDutyCycle')
    MaxEirp_1: Optional[MaxEirp] = Field(None, alias='MaxEirp')
    PingSlotDr_1: Optional[PingSlotDr] = Field(None, alias='PingSlotDr')
    PingSlotFreq_1: Optional[PingSlotFreq] = Field(None, alias='PingSlotFreq')
    PingSlotPeriod_1: Optional[PingSlotPeriod] = Field(None, alias='PingSlotPeriod')
    RegParamsRevision_1: Optional[RegParamsRevision] = Field(
        None, alias='RegParamsRevision'
    )
    RfRegion_1: Optional[RfRegion] = Field(None, alias='RfRegion')
    RxDataRate2_1: Optional[RxDataRate2] = Field(None, alias='RxDataRate2')
    RxDelay1_1: Optional[RxDelay1] = Field(None, alias='RxDelay1')
    RxDrOffset1_1: Optional[RxDrOffset1] = Field(None, alias='RxDrOffset1')
    RxFreq2_1: Optional[RxFreq2] = Field(None, alias='RxFreq2')
    Supports32BitFCnt_1: Optional[Supports32BitFCnt] = Field(
        None, alias='Supports32BitFCnt'
    )
    SupportsClassB_1: Optional[SupportsClassB] = Field(None, alias='SupportsClassB')
    SupportsClassC_1: Optional[SupportsClassC] = Field(None, alias='SupportsClassC')
    SupportsJoin_1: Optional[SupportsJoin] = Field(None, alias='SupportsJoin')


class LoRaWANFuotaTask(BaseModel):
    RfRegion: Optional[SupportedRfRegion] = None


class LoRaWANFuotaTaskGetInfo(BaseModel):
    RfRegion_1: Optional[RfRegion] = Field(None, alias='RfRegion')
    StartTime_1: Optional[StartTime] = Field(None, alias='StartTime')


class LoRaWANGatewayVersion(BaseModel):
    Model_1: Optional[Model] = Field(None, alias='Model')
    PackageVersion_1: Optional[PackageVersion] = Field(None, alias='PackageVersion')
    Station_1: Optional[Station] = Field(None, alias='Station')


class LoRaWANGetServiceProfileInfo(BaseModel):
    AddGwMetadata_1: Optional[AddGwMetadata] = Field(None, alias='AddGwMetadata')
    ChannelMask_1: Optional[ChannelMask] = Field(None, alias='ChannelMask')
    DevStatusReqFreq_1: Optional[DevStatusReqFreq] = Field(
        None, alias='DevStatusReqFreq'
    )
    DlBucketSize_1: Optional[DlBucketSize] = Field(None, alias='DlBucketSize')
    DlRate_1: Optional[DlRate] = Field(None, alias='DlRate')
    DlRatePolicy_1: Optional[DlRatePolicy] = Field(None, alias='DlRatePolicy')
    DrMax_1: Optional[DrMax] = Field(None, alias='DrMax')
    DrMin_1: Optional[DrMin] = Field(None, alias='DrMin')
    HrAllowed_1: Optional[HrAllowed] = Field(None, alias='HrAllowed')
    MinGwDiversity_1: Optional[MinGwDiversity] = Field(None, alias='MinGwDiversity')
    NwkGeoLoc_1: Optional[NwkGeoLoc] = Field(None, alias='NwkGeoLoc')
    PrAllowed_1: Optional[PrAllowed] = Field(None, alias='PrAllowed')
    RaAllowed_1: Optional[RaAllowed] = Field(None, alias='RaAllowed')
    ReportDevStatusBattery_1: Optional[ReportDevStatusBattery] = Field(
        None, alias='ReportDevStatusBattery'
    )
    ReportDevStatusMargin_1: Optional[ReportDevStatusMargin] = Field(
        None, alias='ReportDevStatusMargin'
    )
    TargetPer_1: Optional[TargetPer] = Field(None, alias='TargetPer')
    UlBucketSize_1: Optional[UlBucketSize] = Field(None, alias='UlBucketSize')
    UlRate_1: Optional[UlRate] = Field(None, alias='UlRate')
    UlRatePolicy_1: Optional[UlRatePolicy] = Field(None, alias='UlRatePolicy')


class LoRaWANMulticast(BaseModel):
    DlClass_1: Optional[DlClass] = Field(None, alias='DlClass')
    RfRegion: Optional[SupportedRfRegion] = None


class LoRaWANMulticastGet(BaseModel):
    DlClass_1: Optional[DlClass] = Field(None, alias='DlClass')
    NumberOfDevicesInGroup_1: Optional[NumberOfDevicesInGroup] = Field(
        None, alias='NumberOfDevicesInGroup'
    )
    NumberOfDevicesRequested_1: Optional[NumberOfDevicesRequested] = Field(
        None, alias='NumberOfDevicesRequested'
    )
    RfRegion: Optional[SupportedRfRegion] = None


class LoRaWANMulticastSession(BaseModel):
    DlDr_1: Optional[DlDr] = Field(None, alias='DlDr')
    DlFreq_1: Optional[DlFreq] = Field(None, alias='DlFreq')
    PingSlotPeriod_1: Optional[PingSlotPeriod] = Field(None, alias='PingSlotPeriod')
    SessionStartTime: Optional[SessionStartTimeTimestamp] = None
    SessionTimeout_1: Optional[SessionTimeout] = Field(None, alias='SessionTimeout')


class LoRaWANServiceProfile(BaseModel):
    AddGwMetadata_1: Optional[AddGwMetadata] = Field(None, alias='AddGwMetadata')
    DrMax: Optional[DrMaxBox] = None
    DrMin: Optional[DrMinBox] = None
    PrAllowed_1: Optional[PrAllowed] = Field(None, alias='PrAllowed')
    RaAllowed_1: Optional[RaAllowed] = Field(None, alias='RaAllowed')


class LoRaWANStartFuotaTask(BaseModel):
    StartTime_1: Optional[StartTime] = Field(None, alias='StartTime')


class LoRaWANUpdateGatewayTaskCreate(BaseModel):
    CurrentVersion: Optional[LoRaWANGatewayVersion] = None
    SigKeyCrc: Optional[Crc] = None
    UpdateSignature_1: Optional[UpdateSignature] = Field(None, alias='UpdateSignature')
    UpdateVersion: Optional[LoRaWANGatewayVersion] = None


class LoRaWANUpdateGatewayTaskEntry(BaseModel):
    CurrentVersion: Optional[LoRaWANGatewayVersion] = None
    UpdateVersion: Optional[LoRaWANGatewayVersion] = None


class LteLocalId(BaseModel):
    Earfcn: EARFCN
    Pci: PCI


class LteNmrObj(BaseModel):
    Earfcn: EARFCN
    EutranCid_1: EutranCid = Field(..., alias='EutranCid')
    Pci: PCI
    Rsrp: Optional[RSRP] = None
    Rsrq: Optional[RSRQ] = None


class MessageDeliveryStatusEventConfiguration(BaseModel):
    Sidewalk: Optional[SidewalkEventNotificationConfigurations] = None
    WirelessDeviceIdEventTopic: Optional[EventNotificationTopicStatus] = None


class MessageDeliveryStatusResourceTypeEventConfiguration(BaseModel):
    Sidewalk: Optional[SidewalkResourceTypeEventConfiguration] = None


class MulticastGroup(BaseModel):
    Arn: Optional[MulticastGroupArn] = None
    Id: Optional[MulticastGroupId] = None
    Name: Optional[MulticastGroupName] = None


class MulticastGroupByFuotaTask(BaseModel):
    Id: Optional[MulticastGroupId] = None


class MulticastGroupList(RootModel[List[MulticastGroup]]):
    root: List[MulticastGroup] = Field(..., description='List of multicast groups.')


class MulticastGroupListByFuotaTask(RootModel[List[MulticastGroupByFuotaTask]]):
    root: List[MulticastGroupByFuotaTask] = Field(
        ..., description='List of multicast groups associated with a FUOTA task.'
    )


class NetworkAnalyzerConfigurationList(RootModel[List[NetworkAnalyzerConfigurations]]):
    root: List[NetworkAnalyzerConfigurations]


class PositionCoordinate(RootModel[List[PositionCoordinateValue]]):
    root: List[PositionCoordinateValue]


class PositionSolverConfigurations(BaseModel):
    SemtechGnss: Optional[SemtechGnssConfiguration] = None


class PositionSolverDetails(BaseModel):
    SemtechGnss: Optional[SemtechGnssDetail] = None


class PrivateKeysList(RootModel[List[CertificateList]]):
    root: List[CertificateList]


class ProximityEventConfiguration(BaseModel):
    Sidewalk: Optional[SidewalkEventNotificationConfigurations] = None
    WirelessDeviceIdEventTopic: Optional[EventNotificationTopicStatus] = None


class ProximityResourceTypeEventConfiguration(BaseModel):
    Sidewalk: Optional[SidewalkResourceTypeEventConfiguration] = None


class PutPositionConfigurationRequest(BaseModel):
    Destination: Optional[DestinationName] = None
    Solvers: Optional[PositionSolverConfigurations] = None


class ServiceProfile(BaseModel):
    Arn: Optional[ServiceProfileArn] = None
    Id: Optional[ServiceProfileId] = None
    Name: Optional[ServiceProfileName] = None


class ServiceProfileList(RootModel[List[ServiceProfile]]):
    root: List[ServiceProfile]


class SidewalkDevice(BaseModel):
    AmazonId_1: Optional[AmazonId] = Field(None, alias='AmazonId')
    CertificateId: Optional[DakCertificateId] = None
    DeviceCertificates: Optional[DeviceCertificateList] = None
    DeviceProfileId_1: Optional[DeviceProfileId] = Field(None, alias='DeviceProfileId')
    PrivateKeys: Optional[PrivateKeysList] = None
    SidewalkId_1: Optional[SidewalkId] = Field(None, alias='SidewalkId')
    SidewalkManufacturingSn_1: Optional[SidewalkManufacturingSn] = Field(
        None, alias='SidewalkManufacturingSn'
    )
    Status: Optional[WirelessDeviceSidewalkStatus] = None


class SidewalkGetDeviceProfile(BaseModel):
    ApplicationServerPublicKey_1: Optional[ApplicationServerPublicKey] = Field(
        None, alias='ApplicationServerPublicKey'
    )
    DakCertificateMetadata: Optional[DakCertificateMetadataList] = None
    QualificationStatus_1: Optional[QualificationStatus] = Field(
        None, alias='QualificationStatus'
    )


class SidewalkListDevice(BaseModel):
    AmazonId_1: Optional[AmazonId] = Field(None, alias='AmazonId')
    DeviceCertificates: Optional[DeviceCertificateList] = None
    DeviceProfileId_1: Optional[DeviceProfileId] = Field(None, alias='DeviceProfileId')
    SidewalkId_1: Optional[SidewalkId] = Field(None, alias='SidewalkId')
    SidewalkManufacturingSn_1: Optional[SidewalkManufacturingSn] = Field(
        None, alias='SidewalkManufacturingSn'
    )
    Status: Optional[WirelessDeviceSidewalkStatus] = None


class StartFuotaTaskRequest(BaseModel):
    LoRaWAN: Optional[LoRaWANStartFuotaTask] = None


class StartMulticastGroupSessionRequest(BaseModel):
    LoRaWAN: LoRaWANMulticastSession


class Tag(BaseModel):
    Key: TagKey
    Value: TagValue


class TagList(RootModel[List[Tag]]):
    root: List[Tag] = Field(
        ...,
        description='The tag to attach to the specified resource. Tags are metadata that you can use to manage a resource.',
        max_length=200,
        min_length=0,
    )


class TagResourceRequest(BaseModel):
    Tags: TagList


class TdscdmaLocalId(BaseModel):
    CellParams_1: CellParams = Field(..., alias='CellParams')
    Uarfcn: UARFCN


class TdscdmaNmrObj(BaseModel):
    CellParams_1: CellParams = Field(..., alias='CellParams')
    PathLoss_1: Optional[PathLoss] = Field(None, alias='PathLoss')
    Rscp: Optional[RSCP] = None
    Uarfcn: UARFCN
    UtranCid_1: Optional[UtranCid] = Field(None, alias='UtranCid')


class UpdateEventConfigurationByResourceTypesRequest(BaseModel):
    ConnectionStatus: Optional[ConnectionStatusResourceTypeEventConfiguration] = None
    DeviceRegistrationState: Optional[
        DeviceRegistrationStateResourceTypeEventConfiguration
    ] = None
    Join: Optional[JoinResourceTypeEventConfiguration] = None
    MessageDeliveryStatus: Optional[
        MessageDeliveryStatusResourceTypeEventConfiguration
    ] = None
    Proximity: Optional[ProximityResourceTypeEventConfiguration] = None


class UpdateFPorts(BaseModel):
    Applications_1: Optional[Applications] = Field(None, alias='Applications')
    Positioning_1: Optional[Positioning] = Field(None, alias='Positioning')


class UpdateFuotaTaskRequest(BaseModel):
    Description_1: Optional[Description] = Field(None, alias='Description')
    FirmwareUpdateImage_1: Optional[FirmwareUpdateImage] = Field(
        None, alias='FirmwareUpdateImage'
    )
    FirmwareUpdateRole_1: Optional[FirmwareUpdateRole] = Field(
        None, alias='FirmwareUpdateRole'
    )
    FragmentIntervalMS_1: Optional[FragmentIntervalMS] = Field(
        None, alias='FragmentIntervalMS'
    )
    FragmentSizeBytes_1: Optional[FragmentSizeBytes] = Field(
        None, alias='FragmentSizeBytes'
    )
    LoRaWAN: Optional[LoRaWANFuotaTask] = None
    Name: Optional[FuotaTaskName] = None
    RedundancyPercent_1: Optional[RedundancyPercent] = Field(
        None, alias='RedundancyPercent'
    )


class UpdateMulticastGroupRequest(BaseModel):
    Description_1: Optional[Description] = Field(None, alias='Description')
    LoRaWAN: Optional[LoRaWANMulticast] = None
    Name: Optional[MulticastGroupName] = None


class UpdateNetworkAnalyzerConfigurationRequest(BaseModel):
    Description_1: Optional[Description] = Field(None, alias='Description')
    TraceContent_1: Optional[TraceContent] = Field(None, alias='TraceContent')
    WirelessDevicesToAdd: Optional[WirelessDeviceList] = None
    WirelessDevicesToRemove: Optional[WirelessDeviceList] = None
    WirelessGatewaysToAdd: Optional[WirelessGatewayList] = None
    WirelessGatewaysToRemove: Optional[WirelessGatewayList] = None


class UpdatePositionRequest(BaseModel):
    Position: PositionCoordinate


class UpdateResourceEventConfigurationRequest(BaseModel):
    ConnectionStatus: Optional[ConnectionStatusEventConfiguration] = None
    DeviceRegistrationState: Optional[DeviceRegistrationStateEventConfiguration] = None
    Join: Optional[JoinEventConfiguration] = None
    MessageDeliveryStatus: Optional[MessageDeliveryStatusEventConfiguration] = None
    Proximity: Optional[ProximityEventConfiguration] = None


class UpdateWirelessGatewayRequest(BaseModel):
    Description_1: Optional[Description] = Field(None, alias='Description')
    JoinEuiFilters_1: Optional[JoinEuiFilters] = Field(None, alias='JoinEuiFilters')
    MaxEirp: Optional[GatewayMaxEirp] = None
    Name: Optional[WirelessGatewayName] = None
    NetIdFilters_1: Optional[NetIdFilters] = Field(None, alias='NetIdFilters')


class UpdateWirelessGatewayTaskCreate(BaseModel):
    LoRaWAN: Optional[LoRaWANUpdateGatewayTaskCreate] = None
    UpdateDataRole: Optional[UpdateDataSource] = None
    UpdateDataSource_1: Optional[UpdateDataSource] = Field(
        None, alias='UpdateDataSource'
    )


class UpdateWirelessGatewayTaskEntry(BaseModel):
    Arn: Optional[WirelessGatewayTaskDefinitionArn] = None
    Id: Optional[WirelessGatewayTaskDefinitionId] = None
    LoRaWAN: Optional[LoRaWANUpdateGatewayTaskEntry] = None


class WcdmaNmrList(RootModel[List[WcdmaNmrObj]]):
    root: List[WcdmaNmrObj] = Field(..., max_length=32, min_length=1)


class WcdmaObj(BaseModel):
    Lac: Optional[LAC] = None
    Mcc: MCC
    Mnc: MNC
    PathLoss_1: Optional[PathLoss] = Field(None, alias='PathLoss')
    Rscp: Optional[RSCP] = None
    UtranCid_1: UtranCid = Field(..., alias='UtranCid')
    WcdmaLocalId_1: Optional[WcdmaLocalId] = Field(None, alias='WcdmaLocalId')
    WcdmaNmr: Optional[WcdmaNmrList] = None


class WirelessDeviceLogOption(BaseModel):
    Events: Optional[WirelessDeviceEventLogOptionList] = None
    LogLevel_1: LogLevel = Field(..., alias='LogLevel')
    Type: WirelessDeviceType


class WirelessDeviceLogOptionList(RootModel[List[WirelessDeviceLogOption]]):
    root: List[WirelessDeviceLogOption] = Field(
        ..., description='The list of wireless device log options.'
    )


class WirelessDeviceStatistics(BaseModel):
    Arn: Optional[WirelessDeviceArn] = None
    DestinationName_1: Optional[DestinationName] = Field(None, alias='DestinationName')
    FuotaDeviceStatus_1: Optional[FuotaDeviceStatus] = Field(
        None, alias='FuotaDeviceStatus'
    )
    Id: Optional[WirelessDeviceId] = None
    LastUplinkReceivedAt: Optional[ISODateTimeString] = None
    LoRaWAN: Optional[LoRaWANListDevice] = None
    McGroupId_1: Optional[McGroupId] = Field(None, alias='McGroupId')
    MulticastDeviceStatus_1: Optional[MulticastDeviceStatus] = Field(
        None, alias='MulticastDeviceStatus'
    )
    Name: Optional[WirelessDeviceName] = None
    Sidewalk: Optional[SidewalkListDevice] = None
    Type: Optional[WirelessDeviceType] = None


class WirelessDeviceStatisticsList(RootModel[List[WirelessDeviceStatistics]]):
    root: List[WirelessDeviceStatistics]


class WirelessGatewayLogOption(BaseModel):
    Events: Optional[WirelessGatewayEventLogOptionList] = None
    LogLevel_1: LogLevel = Field(..., alias='LogLevel')
    Type: WirelessGatewayType


class WirelessGatewayLogOptionList(RootModel[List[WirelessGatewayLogOption]]):
    root: List[WirelessGatewayLogOption] = Field(
        ..., description='The list of wireless gateway log options.'
    )


class WirelessGatewayTaskDefinitionList(
    RootModel[List[UpdateWirelessGatewayTaskEntry]]
):
    root: List[UpdateWirelessGatewayTaskEntry]


class DestinationsPostRequest(BaseModel):
    ClientRequestToken: Optional[
        constr(pattern=r'^[a-zA-Z0-9-_]+$', min_length=1, max_length=64)
    ] = Field(
        None,
        description='Each resource must have a unique client request token. If you try to create a new resource with the same token as a resource that already exists, an exception occurs. If you omit this value, AWS SDKs will automatically generate a unique client request.',
    )
    Description: Optional[constr(max_length=2048)] = Field(
        None, description='The description of the new resource.'
    )
    Expression: constr(max_length=2048) = Field(
        ..., description='The rule name or topic rule to send messages to.'
    )
    ExpressionType_1: ExpressionType = Field(
        ...,
        alias='ExpressionType',
        description='The type of value in <code>Expression</code>.',
    )
    Name: constr(pattern=r'[a-zA-Z0-9-_]+', max_length=128) = Field(
        ..., description='The name of the new resource.'
    )
    RoleArn: constr(min_length=20, max_length=2048) = Field(
        ..., description='The ARN of the IAM Role that authorizes the destination.'
    )
    Tags: Optional[List[Tag]] = Field(
        None,
        description='The tag to attach to the specified resource. Tags are metadata that you can use to manage a resource.',
        max_length=200,
        min_length=0,
    )


class LoRaWAN(BaseModel):
    ClassBTimeout_1: Optional[ClassBTimeout] = Field(None, alias='ClassBTimeout')
    ClassCTimeout_1: Optional[ClassCTimeout] = Field(None, alias='ClassCTimeout')
    FactoryPresetFreqsList_1: Optional[FactoryPresetFreqsList] = Field(
        None, alias='FactoryPresetFreqsList'
    )
    MacVersion_1: Optional[MacVersion] = Field(None, alias='MacVersion')
    MaxDutyCycle_1: Optional[MaxDutyCycle] = Field(None, alias='MaxDutyCycle')
    MaxEirp_1: Optional[MaxEirp] = Field(None, alias='MaxEirp')
    PingSlotDr_1: Optional[PingSlotDr] = Field(None, alias='PingSlotDr')
    PingSlotFreq_1: Optional[PingSlotFreq] = Field(None, alias='PingSlotFreq')
    PingSlotPeriod_1: Optional[PingSlotPeriod] = Field(None, alias='PingSlotPeriod')
    RegParamsRevision_1: Optional[RegParamsRevision] = Field(
        None, alias='RegParamsRevision'
    )
    RfRegion_1: Optional[RfRegion] = Field(None, alias='RfRegion')
    RxDataRate2_1: Optional[RxDataRate2] = Field(None, alias='RxDataRate2')
    RxDelay1_1: Optional[RxDelay1] = Field(None, alias='RxDelay1')
    RxDrOffset1_1: Optional[RxDrOffset1] = Field(None, alias='RxDrOffset1')
    RxFreq2_1: Optional[RxFreq2] = Field(None, alias='RxFreq2')
    Supports32BitFCnt_1: Optional[Supports32BitFCnt] = Field(
        None, alias='Supports32BitFCnt'
    )
    SupportsClassB_1: Optional[SupportsClassB] = Field(None, alias='SupportsClassB')
    SupportsClassC_1: Optional[SupportsClassC] = Field(None, alias='SupportsClassC')
    SupportsJoin_1: Optional[SupportsJoin] = Field(None, alias='SupportsJoin')


class DeviceProfilesPostRequest(BaseModel):
    ClientRequestToken: Optional[
        constr(pattern=r'^[a-zA-Z0-9-_]+$', min_length=1, max_length=64)
    ] = Field(
        None,
        description='Each resource must have a unique client request token. If you try to create a new resource with the same token as a resource that already exists, an exception occurs. If you omit this value, AWS SDKs will automatically generate a unique client request.',
    )
    LoRaWAN_1: Optional[LoRaWAN] = Field(
        None, alias='LoRaWAN', description='LoRaWANDeviceProfile object.'
    )
    Name: Optional[constr(max_length=256)] = Field(
        None, description='The name of the new resource.'
    )
    Sidewalk: Optional[Dict[str, Any]] = Field(
        None, description='Sidewalk object for creating a device profile.'
    )
    Tags: Optional[List[Tag]] = Field(
        None,
        description='The tag to attach to the specified resource. Tags are metadata that you can use to manage a resource.',
        max_length=200,
        min_length=0,
    )


class FuotaTasksPostRequest(BaseModel):
    ClientRequestToken: Optional[
        constr(pattern=r'^[a-zA-Z0-9-_]+$', min_length=1, max_length=64)
    ] = Field(
        None,
        description='Each resource must have a unique client request token. If you try to create a new resource with the same token as a resource that already exists, an exception occurs. If you omit this value, AWS SDKs will automatically generate a unique client request.',
    )
    Description: Optional[constr(max_length=2048)] = Field(
        None, description='The description of the new resource.'
    )
    FirmwareUpdateImage: constr(min_length=1, max_length=4096) = Field(
        ...,
        description='The S3 URI points to a firmware update image that is to be used with a FUOTA task.',
    )
    FirmwareUpdateRole: constr(min_length=1, max_length=2048) = Field(
        ...,
        description='The firmware update role that is to be used with a FUOTA task.',
    )
    FragmentIntervalMS: Optional[conint(ge=1)] = Field(
        None,
        description="The interval of sending fragments in milliseconds. Currently the interval will be rounded to the nearest second. Note that this interval only controls the timing when the cloud sends the fragments down. The actual delay of receiving fragments at device side depends on the device's class and the communication delay with the cloud.",
    )
    FragmentSizeBytes: Optional[conint(ge=1)] = Field(
        None,
        description='The size of each fragment in bytes. Currently only supported in fuota tasks with multicast groups.',
    )
    LoRaWAN: Optional[LoRaWAN1] = Field(
        None, description='The LoRaWAN information used with a FUOTA task.'
    )
    Name: Optional[constr(max_length=256)] = Field(
        None, description='The name of a FUOTA task.'
    )
    RedundancyPercent: Optional[conint(ge=0, le=100)] = Field(
        None,
        description='The percentage of added redundant fragments. For example, if firmware file is 100 bytes and fragment size is 10 bytes, with <code>RedundancyPercent</code> set to 50(%), the final number of encoded fragments is (100 / 10) + (100 / 10 * 50%) = 15.',
    )
    Tags: Optional[List[Tag]] = Field(
        None,
        description='The tag to attach to the specified resource. Tags are metadata that you can use to manage a resource.',
        max_length=200,
        min_length=0,
    )


class LogLevelsPostRequest(BaseModel):
    DefaultLogLevel_1: Optional[DefaultLogLevel] = Field(
        None,
        alias='DefaultLogLevel',
        description='The log level for a log message. The log levels can be disabled, or set to <code>ERROR</code> to display less verbose logs containing only error information, or to <code>INFO</code> for more detailed logs.',
    )
    WirelessDeviceLogOptions: Optional[List[WirelessDeviceLogOption]] = Field(
        None, description='The list of wireless device log options.'
    )
    WirelessGatewayLogOptions: Optional[List[WirelessGatewayLogOption]] = Field(
        None, description='The list of wireless gateway log options.'
    )


class MulticastGroupsPostRequest(BaseModel):
    ClientRequestToken: Optional[
        constr(pattern=r'^[a-zA-Z0-9-_]+$', min_length=1, max_length=64)
    ] = Field(
        None,
        description='Each resource must have a unique client request token. If you try to create a new resource with the same token as a resource that already exists, an exception occurs. If you omit this value, AWS SDKs will automatically generate a unique client request.',
    )
    Description: Optional[constr(max_length=2048)] = Field(
        None, description='The description of the new resource.'
    )
    LoRaWAN: LoRaWAN4 = Field(
        ...,
        description='The LoRaWAN information that is to be used with the multicast group.',
    )
    Name: Optional[constr(max_length=256)] = Field(
        None, description='The name of the multicast group.'
    )
    Tags: Optional[List[Tag]] = Field(
        None,
        description='The tag to attach to the specified resource. Tags are metadata that you can use to manage a resource.',
        max_length=200,
        min_length=0,
    )


class MulticastGroupsIdBulkPatchRequest(BaseModel):
    QueryString: Optional[constr(max_length=4096)] = Field(
        None,
        description='Query string used to search for wireless devices as part of the bulk associate and disassociate process.',
    )
    Tags: Optional[List[Tag]] = Field(
        None,
        description='The tag to attach to the specified resource. Tags are metadata that you can use to manage a resource.',
        max_length=200,
        min_length=0,
    )


class MulticastGroupsIdBulkPostRequest(BaseModel):
    QueryString: Optional[constr(max_length=4096)] = Field(
        None,
        description='Query string used to search for wireless devices as part of the bulk associate and disassociate process.',
    )
    Tags: Optional[List[Tag]] = Field(
        None,
        description='The tag to attach to the specified resource. Tags are metadata that you can use to manage a resource.',
        max_length=200,
        min_length=0,
    )


class NetworkAnalyzerConfigurationsPostRequest(BaseModel):
    ClientRequestToken: Optional[
        constr(pattern=r'^[a-zA-Z0-9-_]+$', min_length=1, max_length=64)
    ] = Field(
        None,
        description='Each resource must have a unique client request token. If you try to create a new resource with the same token as a resource that already exists, an exception occurs. If you omit this value, AWS SDKs will automatically generate a unique client request.',
    )
    Description: Optional[constr(max_length=2048)] = Field(
        None, description='The description of the new resource.'
    )
    Name: constr(pattern=r'[a-zA-Z0-9-_]+', min_length=1, max_length=1024) = Field(
        ..., description='Name of the network analyzer configuration.'
    )
    Tags: Optional[List[Tag]] = Field(
        None,
        description='The tag to attach to the specified resource. Tags are metadata that you can use to manage a resource.',
        max_length=200,
        min_length=0,
    )
    TraceContent_1: Optional[TraceContent] = Field(
        None,
        alias='TraceContent',
        description='Trace content for your wireless gateway and wireless device resources.',
    )
    WirelessDevices: Optional[List[WirelessDeviceId]] = Field(
        None,
        description='Wireless device resources to add to the network analyzer configuration. Provide the <code>WirelessDeviceId</code> of the resource to add in the input array.',
        max_length=250,
        min_length=0,
    )
    WirelessGateways: Optional[List[WirelessGatewayId]] = Field(
        None,
        description='Wireless gateway resources to add to the network analyzer configuration. Provide the <code>WirelessGatewayId</code> of the resource to add in the input array.',
    )


class PartnerAccountsPostRequest(BaseModel):
    ClientRequestToken: Optional[
        constr(pattern=r'^[a-zA-Z0-9-_]+$', min_length=1, max_length=64)
    ] = Field(
        None,
        description='Each resource must have a unique client request token. If you try to create a new resource with the same token as a resource that already exists, an exception occurs. If you omit this value, AWS SDKs will automatically generate a unique client request.',
    )
    Sidewalk_1: Sidewalk = Field(
        ..., alias='Sidewalk', description='Information about a Sidewalk account.'
    )
    Tags: Optional[List[Tag]] = Field(
        None,
        description='The tag to attach to the specified resource. Tags are metadata that you can use to manage a resource.',
        max_length=200,
        min_length=0,
    )


class Gnss1(BaseModel):
    AssistAltitude: Optional[Coordinate] = None
    AssistPosition_1: Optional[AssistPosition] = Field(None, alias='AssistPosition')
    CaptureTime: Optional[GPST] = None
    CaptureTimeAccuracy_1: Optional[CaptureTimeAccuracy] = Field(
        None, alias='CaptureTimeAccuracy'
    )
    Payload: Optional[GnssNav] = None
    Use2DSolver_1: Optional[Use2DSolver] = Field(None, alias='Use2DSolver')


class ServiceProfilesPostRequest(BaseModel):
    ClientRequestToken: Optional[
        constr(pattern=r'^[a-zA-Z0-9-_]+$', min_length=1, max_length=64)
    ] = Field(
        None,
        description='Each resource must have a unique client request token. If you try to create a new resource with the same token as a resource that already exists, an exception occurs. If you omit this value, AWS SDKs will automatically generate a unique client request.',
    )
    LoRaWAN: Optional[LoRaWAN7] = Field(
        None, description='LoRaWANServiceProfile object.'
    )
    Name: Optional[constr(max_length=256)] = Field(
        None, description='The name of the new resource.'
    )
    Tags: Optional[List[Tag]] = Field(
        None,
        description='The tag to attach to the specified resource. Tags are metadata that you can use to manage a resource.',
        max_length=200,
        min_length=0,
    )


class TagsResourceArnPostRequest(BaseModel):
    Tags: List[Tag] = Field(
        ...,
        description='The tag to attach to the specified resource. Tags are metadata that you can use to manage a resource.',
        max_length=200,
        min_length=0,
    )


class LoRaWAN8(BaseModel):
    AbpV1_0_x: Optional[AbpV10X] = None
    AbpV1_1: Optional[AbpV11] = None
    DevEui_1: Optional[DevEui] = Field(None, alias='DevEui')
    DeviceProfileId_1: Optional[DeviceProfileId] = Field(None, alias='DeviceProfileId')
    FPorts_1: Optional[FPorts] = Field(None, alias='FPorts')
    OtaaV1_0_x: Optional[OtaaV10X] = None
    OtaaV1_1: Optional[OtaaV11] = None
    ServiceProfileId_1: Optional[ServiceProfileId] = Field(
        None, alias='ServiceProfileId'
    )


class WirelessDevicesPostRequest(BaseModel):
    ClientRequestToken: Optional[
        constr(pattern=r'^[a-zA-Z0-9-_]+$', min_length=1, max_length=64)
    ] = Field(
        None,
        description='Each resource must have a unique client request token. If you try to create a new resource with the same token as a resource that already exists, an exception occurs. If you omit this value, AWS SDKs will automatically generate a unique client request.',
    )
    Description: Optional[constr(max_length=2048)] = Field(
        None, description='The description of the new resource.'
    )
    DestinationName: constr(pattern=r'[a-zA-Z0-9-_]+', max_length=128) = Field(
        ...,
        description='The name of the destination to assign to the new wireless device.',
    )
    LoRaWAN: Optional[LoRaWAN8] = Field(
        None, description='LoRaWAN object for create functions.'
    )
    Name: Optional[constr(max_length=256)] = Field(
        None, description='The name of the new resource.'
    )
    Positioning: Optional[Positioning1] = Field(
        None,
        description='FPort values for the GNSS, stream, and ClockSync functions of the positioning information.',
    )
    Sidewalk: Optional[Sidewalk2] = Field(
        None, description='Sidewalk object for creating a wireless device.'
    )
    Tags: Optional[List[Tag]] = Field(
        None,
        description='The tag to attach to the specified resource. Tags are metadata that you can use to manage a resource.',
        max_length=200,
        min_length=0,
    )
    Type_1: Type = Field(..., alias='Type', description='The wireless device type.')


class LoRaWAN9(BaseModel):
    AbpV1_0_x: Optional[UpdateAbpV10X] = None
    AbpV1_1: Optional[UpdateAbpV11] = None
    DeviceProfileId_1: Optional[DeviceProfileId] = Field(None, alias='DeviceProfileId')
    FPorts: Optional[UpdateFPorts] = None
    ServiceProfileId_1: Optional[ServiceProfileId] = Field(
        None, alias='ServiceProfileId'
    )


class WirelessDevicesIdPatchRequest(BaseModel):
    Description: Optional[constr(max_length=2048)] = Field(
        None, description='The description of the new resource.'
    )
    DestinationName: Optional[constr(pattern=r'[a-zA-Z0-9-_]+', max_length=128)] = (
        Field(None, description='The name of the new destination for the device.')
    )
    LoRaWAN: Optional[LoRaWAN9] = Field(
        None, description='LoRaWAN object for update functions.'
    )
    Name: Optional[constr(max_length=256)] = Field(
        None, description='The new name of the resource.'
    )
    Positioning: Optional[Positioning1] = Field(
        None,
        description='FPort values for the GNSS, stream, and ClockSync functions of the positioning information.',
    )


class Update(BaseModel):
    LoRaWAN: Optional[LoRaWANUpdateGatewayTaskCreate] = None
    UpdateDataRole: Optional[UpdateDataSource] = None
    UpdateDataSource_1: Optional[UpdateDataSource] = Field(
        None, alias='UpdateDataSource'
    )


class WirelessGatewayTaskDefinitionsPostRequest(BaseModel):
    AutoCreateTasks: bool = Field(
        ...,
        description='Whether to automatically create tasks using this task definition for all gateways with the specified current version. If <code>false</code>, the task must me created by calling <code>CreateWirelessGatewayTask</code>.',
    )
    ClientRequestToken: Optional[
        constr(pattern=r'^[a-zA-Z0-9-_]+$', min_length=1, max_length=64)
    ] = Field(
        None,
        description='Each resource must have a unique client request token. If you try to create a new resource with the same token as a resource that already exists, an exception occurs. If you omit this value, AWS SDKs will automatically generate a unique client request.',
    )
    Name: Optional[constr(min_length=1, max_length=2048)] = Field(
        None, description='The name of the new resource.'
    )
    Tags: Optional[List[Tag]] = Field(
        None,
        description='The tag to attach to the specified resource. Tags are metadata that you can use to manage a resource.',
        max_length=200,
        min_length=0,
    )
    Update_1: Optional[Update] = Field(
        None, alias='Update', description='UpdateWirelessGatewayTaskCreate object.'
    )


class WirelessDeviceImportTaskPostRequest(BaseModel):
    ClientRequestToken: Optional[
        constr(pattern=r'^[a-zA-Z0-9-_]+$', min_length=1, max_length=64)
    ] = Field(
        None,
        description='Each resource must have a unique client request token. If you try to create a new resource with the same token as a resource that already exists, an exception occurs. If you omit this value, AWS SDKs will automatically generate a unique client request.',
    )
    DestinationName: constr(pattern=r'[a-zA-Z0-9-_]+', max_length=128) = Field(
        ...,
        description='The name of the Sidewalk destination that describes the IoT rule to route messages from the devices in the import task that are onboarded to AWS IoT Wireless.',
    )
    Sidewalk: Sidewalk3 = Field(
        ...,
        description='Information about an import task created for bulk provisioning.',
    )
    Tags: Optional[List[Tag]] = Field(
        None,
        description='The tag to attach to the specified resource. Tags are metadata that you can use to manage a resource.',
        max_length=200,
        min_length=0,
    )


class WirelessSingleDeviceImportTaskPostRequest(BaseModel):
    ClientRequestToken: Optional[
        constr(pattern=r'^[a-zA-Z0-9-_]+$', min_length=1, max_length=64)
    ] = Field(
        None,
        description='Each resource must have a unique client request token. If you try to create a new resource with the same token as a resource that already exists, an exception occurs. If you omit this value, AWS SDKs will automatically generate a unique client request.',
    )
    DestinationName: constr(pattern=r'[a-zA-Z0-9-_]+', max_length=128) = Field(
        ...,
        description='The name of the Sidewalk destination that describes the IoT rule to route messages from the device in the import task that will be onboarded to AWS IoT Wireless.',
    )
    DeviceName: Optional[str] = Field(
        None,
        description='The name of the wireless device for which an import task is being started.',
    )
    Sidewalk: Sidewalk5 = Field(
        ...,
        description='Information about an import task created for an individual Sidewalk device.',
    )
    Tags: Optional[List[Tag]] = Field(
        None,
        description='The tag to attach to the specified resource. Tags are metadata that you can use to manage a resource.',
        max_length=200,
        min_length=0,
    )


class AssociateAwsAccountWithPartnerAccountRequest(BaseModel):
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    Sidewalk: SidewalkAccountInfo
    Tags: Optional[TagList] = None


class Beaconing(BaseModel):
    DataRate: Optional[BeaconingDataRate] = None
    Frequencies: Optional[BeaconingFrequencies] = None


class CdmaNmrList(RootModel[List[CdmaNmrObj]]):
    root: List[CdmaNmrObj] = Field(..., max_length=32, min_length=1)


class CdmaObj(BaseModel):
    BaseLat_1: Optional[BaseLat] = Field(None, alias='BaseLat')
    BaseLng_1: Optional[BaseLng] = Field(None, alias='BaseLng')
    BaseStationId_1: BaseStationId = Field(..., alias='BaseStationId')
    CdmaLocalId_1: Optional[CdmaLocalId] = Field(None, alias='CdmaLocalId')
    CdmaNmr: Optional[CdmaNmrList] = None
    NetworkId_1: NetworkId = Field(..., alias='NetworkId')
    PilotPower_1: Optional[PilotPower] = Field(None, alias='PilotPower')
    RegistrationZone_1: Optional[RegistrationZone] = Field(
        None, alias='RegistrationZone'
    )
    SystemId_1: SystemId = Field(..., alias='SystemId')


class CreateDestinationRequest(BaseModel):
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    Description_1: Optional[Description] = Field(None, alias='Description')
    Expression_1: Expression = Field(..., alias='Expression')
    ExpressionType_1: ExpressionType = Field(..., alias='ExpressionType')
    Name: DestinationName
    RoleArn_1: RoleArn = Field(..., alias='RoleArn')
    Tags: Optional[TagList] = None


class CreateDeviceProfileRequest(BaseModel):
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    LoRaWAN: Optional[LoRaWANDeviceProfile] = None
    Name: Optional[DeviceProfileName] = None
    Sidewalk: Optional[SidewalkCreateDeviceProfile] = None
    Tags: Optional[TagList] = None


class CreateFuotaTaskRequest(BaseModel):
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    Description_1: Optional[Description] = Field(None, alias='Description')
    FirmwareUpdateImage_1: FirmwareUpdateImage = Field(..., alias='FirmwareUpdateImage')
    FirmwareUpdateRole_1: FirmwareUpdateRole = Field(..., alias='FirmwareUpdateRole')
    FragmentIntervalMS_1: Optional[FragmentIntervalMS] = Field(
        None, alias='FragmentIntervalMS'
    )
    FragmentSizeBytes_1: Optional[FragmentSizeBytes] = Field(
        None, alias='FragmentSizeBytes'
    )
    LoRaWAN: Optional[LoRaWANFuotaTask] = None
    Name: Optional[FuotaTaskName] = None
    RedundancyPercent_1: Optional[RedundancyPercent] = Field(
        None, alias='RedundancyPercent'
    )
    Tags: Optional[TagList] = None


class CreateMulticastGroupRequest(BaseModel):
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    Description_1: Optional[Description] = Field(None, alias='Description')
    LoRaWAN: LoRaWANMulticast
    Name: Optional[MulticastGroupName] = None
    Tags: Optional[TagList] = None


class CreateNetworkAnalyzerConfigurationRequest(BaseModel):
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    Description_1: Optional[Description] = Field(None, alias='Description')
    Name: NetworkAnalyzerConfigurationName
    Tags: Optional[TagList] = None
    TraceContent_1: Optional[TraceContent] = Field(None, alias='TraceContent')
    WirelessDevices: Optional[WirelessDeviceList] = None
    WirelessGateways: Optional[WirelessGatewayList] = None


class CreateServiceProfileRequest(BaseModel):
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    LoRaWAN: Optional[LoRaWANServiceProfile] = None
    Name: Optional[ServiceProfileName] = None
    Tags: Optional[TagList] = None


class CreateWirelessDeviceRequest(BaseModel):
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    Description_1: Optional[Description] = Field(None, alias='Description')
    DestinationName_1: DestinationName = Field(..., alias='DestinationName')
    LoRaWAN: Optional[LoRaWANDevice] = None
    Name: Optional[WirelessDeviceName] = None
    Positioning: Optional[PositioningConfigStatus] = None
    Sidewalk: Optional[SidewalkCreateWirelessDevice] = None
    Tags: Optional[TagList] = None
    Type: WirelessDeviceType


class CreateWirelessGatewayTaskDefinitionRequest(BaseModel):
    AutoCreateTasks_1: AutoCreateTasks = Field(..., alias='AutoCreateTasks')
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    Name: Optional[WirelessGatewayTaskName] = None
    Tags: Optional[TagList] = None
    Update: Optional[UpdateWirelessGatewayTaskCreate] = None


class DestinationList(RootModel[List[Destinations]]):
    root: List[Destinations]


class EventNotificationItemConfigurations(BaseModel):
    ConnectionStatus: Optional[ConnectionStatusEventConfiguration] = None
    DeviceRegistrationState: Optional[DeviceRegistrationStateEventConfiguration] = None
    Join: Optional[JoinEventConfiguration] = None
    MessageDeliveryStatus: Optional[MessageDeliveryStatusEventConfiguration] = None
    Proximity: Optional[ProximityEventConfiguration] = None


class GatewayList(RootModel[List[GatewayListItem]]):
    root: List[GatewayListItem]


class GetDeviceProfileResponse(BaseModel):
    Arn: Optional[DeviceProfileArn] = None
    Id: Optional[DeviceProfileId] = None
    LoRaWAN: Optional[LoRaWANDeviceProfile] = None
    Name: Optional[DeviceProfileName] = None
    Sidewalk: Optional[SidewalkGetDeviceProfile] = None


class GetEventConfigurationByResourceTypesResponse(BaseModel):
    ConnectionStatus: Optional[ConnectionStatusResourceTypeEventConfiguration] = None
    DeviceRegistrationState: Optional[
        DeviceRegistrationStateResourceTypeEventConfiguration
    ] = None
    Join: Optional[JoinResourceTypeEventConfiguration] = None
    MessageDeliveryStatus: Optional[
        MessageDeliveryStatusResourceTypeEventConfiguration
    ] = None
    Proximity: Optional[ProximityResourceTypeEventConfiguration] = None


class GetFuotaTaskResponse(BaseModel):
    Arn: Optional[FuotaTaskArn] = None
    CreatedAt_1: Optional[CreatedAt] = Field(None, alias='CreatedAt')
    Description_1: Optional[Description] = Field(None, alias='Description')
    FirmwareUpdateImage_1: Optional[FirmwareUpdateImage] = Field(
        None, alias='FirmwareUpdateImage'
    )
    FirmwareUpdateRole_1: Optional[FirmwareUpdateRole] = Field(
        None, alias='FirmwareUpdateRole'
    )
    FragmentIntervalMS_1: Optional[FragmentIntervalMS] = Field(
        None, alias='FragmentIntervalMS'
    )
    FragmentSizeBytes_1: Optional[FragmentSizeBytes] = Field(
        None, alias='FragmentSizeBytes'
    )
    Id: Optional[FuotaTaskId] = None
    LoRaWAN: Optional[LoRaWANFuotaTaskGetInfo] = None
    Name: Optional[FuotaTaskName] = None
    RedundancyPercent_1: Optional[RedundancyPercent] = Field(
        None, alias='RedundancyPercent'
    )
    Status: Optional[FuotaTaskStatus] = None


class GetLogLevelsByResourceTypesResponse(BaseModel):
    DefaultLogLevel: Optional[LogLevel] = None
    WirelessDeviceLogOptions: Optional[WirelessDeviceLogOptionList] = None
    WirelessGatewayLogOptions: Optional[WirelessGatewayLogOptionList] = None


class GetMulticastGroupResponse(BaseModel):
    Arn: Optional[MulticastGroupArn] = None
    CreatedAt_1: Optional[CreatedAt] = Field(None, alias='CreatedAt')
    Description_1: Optional[Description] = Field(None, alias='Description')
    Id: Optional[MulticastGroupId] = None
    LoRaWAN: Optional[LoRaWANMulticastGet] = None
    Name: Optional[MulticastGroupName] = None
    Status: Optional[MulticastGroupStatus] = None


class GetMulticastGroupSessionResponse(BaseModel):
    LoRaWAN: Optional[LoRaWANMulticastSession] = None


class GetNetworkAnalyzerConfigurationResponse(BaseModel):
    Arn: Optional[NetworkAnalyzerConfigurationArn] = None
    Description_1: Optional[Description] = Field(None, alias='Description')
    Name: Optional[NetworkAnalyzerConfigurationName] = None
    TraceContent_1: Optional[TraceContent] = Field(None, alias='TraceContent')
    WirelessDevices: Optional[WirelessDeviceList] = None
    WirelessGateways: Optional[WirelessGatewayList] = None


class GetPositionConfigurationResponse(BaseModel):
    Destination: Optional[DestinationName] = None
    Solvers: Optional[PositionSolverDetails] = None


class GetPositionResponse(BaseModel):
    Accuracy_1: Optional[Accuracy] = Field(None, alias='Accuracy')
    Position: Optional[PositionCoordinate] = None
    SolverProvider: Optional[PositionSolverProvider] = None
    SolverType: Optional[PositionSolverType] = None
    SolverVersion: Optional[PositionSolverVersion] = None
    Timestamp: Optional[ISODateTimeString] = None


class GetResourceEventConfigurationResponse(BaseModel):
    ConnectionStatus: Optional[ConnectionStatusEventConfiguration] = None
    DeviceRegistrationState: Optional[DeviceRegistrationStateEventConfiguration] = None
    Join: Optional[JoinEventConfiguration] = None
    MessageDeliveryStatus: Optional[MessageDeliveryStatusEventConfiguration] = None
    Proximity: Optional[ProximityEventConfiguration] = None


class GetServiceProfileResponse(BaseModel):
    Arn: Optional[ServiceProfileArn] = None
    Id: Optional[ServiceProfileId] = None
    LoRaWAN: Optional[LoRaWANGetServiceProfileInfo] = None
    Name: Optional[ServiceProfileName] = None


class GetWirelessDeviceResponse(BaseModel):
    Arn: Optional[WirelessDeviceArn] = None
    Description_1: Optional[Description] = Field(None, alias='Description')
    DestinationName_1: Optional[DestinationName] = Field(None, alias='DestinationName')
    Id: Optional[WirelessDeviceId] = None
    LoRaWAN: Optional[LoRaWANDevice] = None
    Name: Optional[WirelessDeviceName] = None
    Positioning: Optional[PositioningConfigStatus] = None
    Sidewalk: Optional[SidewalkDevice] = None
    ThingArn_1: Optional[ThingArn] = Field(None, alias='ThingArn')
    ThingName_1: Optional[ThingName] = Field(None, alias='ThingName')
    Type: Optional[WirelessDeviceType] = None


class GetWirelessDeviceStatisticsResponse(BaseModel):
    LastUplinkReceivedAt: Optional[ISODateTimeString] = None
    LoRaWAN: Optional[LoRaWANDeviceMetadata] = None
    Sidewalk: Optional[SidewalkDeviceMetadata] = None
    WirelessDeviceId_1: Optional[WirelessDeviceId] = Field(
        None, alias='WirelessDeviceId'
    )


class GetWirelessGatewayTaskDefinitionResponse(BaseModel):
    Arn: Optional[WirelessGatewayTaskDefinitionArn] = None
    AutoCreateTasks_1: Optional[AutoCreateTasks] = Field(None, alias='AutoCreateTasks')
    Name: Optional[WirelessGatewayTaskName] = None
    Update: Optional[UpdateWirelessGatewayTaskCreate] = None


class GsmNmrList(RootModel[List[GsmNmrObj]]):
    root: List[GsmNmrObj] = Field(..., max_length=32, min_length=1)


class GsmObj(BaseModel):
    GeranCid_1: GeranCid = Field(..., alias='GeranCid')
    GsmLocalId_1: Optional[GsmLocalId] = Field(None, alias='GsmLocalId')
    GsmNmr: Optional[GsmNmrList] = None
    GsmTimingAdvance_1: Optional[GsmTimingAdvance] = Field(
        None, alias='GsmTimingAdvance'
    )
    Lac: LAC
    Mcc: MCC
    Mnc: MNC
    RxLevel_1: Optional[RxLevel] = Field(None, alias='RxLevel')


class ListDestinationsResponse(BaseModel):
    DestinationList_1: Optional[DestinationList] = Field(None, alias='DestinationList')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListMulticastGroupsByFuotaTaskResponse(BaseModel):
    MulticastGroupList: Optional[MulticastGroupListByFuotaTask] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListMulticastGroupsResponse(BaseModel):
    MulticastGroupList_1: Optional[MulticastGroupList] = Field(
        None, alias='MulticastGroupList'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListNetworkAnalyzerConfigurationsResponse(BaseModel):
    NetworkAnalyzerConfigurationList_1: Optional[NetworkAnalyzerConfigurationList] = (
        Field(None, alias='NetworkAnalyzerConfigurationList')
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListServiceProfilesResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    ServiceProfileList_1: Optional[ServiceProfileList] = Field(
        None, alias='ServiceProfileList'
    )


class ListTagsForResourceResponse(BaseModel):
    Tags: Optional[TagList] = None


class ListWirelessDevicesResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    WirelessDeviceList: Optional[WirelessDeviceStatisticsList] = None


class ListWirelessGatewayTaskDefinitionsResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    TaskDefinitions: Optional[WirelessGatewayTaskDefinitionList] = None


class LoRaWANGateway(BaseModel):
    Beaconing_1: Optional[Beaconing] = Field(None, alias='Beaconing')
    GatewayEui_1: Optional[GatewayEui] = Field(None, alias='GatewayEui')
    JoinEuiFilters_1: Optional[JoinEuiFilters] = Field(None, alias='JoinEuiFilters')
    MaxEirp: Optional[GatewayMaxEirp] = None
    NetIdFilters_1: Optional[NetIdFilters] = Field(None, alias='NetIdFilters')
    RfRegion_1: Optional[RfRegion] = Field(None, alias='RfRegion')
    SubBands_1: Optional[SubBands] = Field(None, alias='SubBands')


class LoRaWANGatewayCurrentVersion(BaseModel):
    CurrentVersion: Optional[LoRaWANGatewayVersion] = None


class LoRaWANUpdateDevice(BaseModel):
    AbpV1_0_x: Optional[UpdateAbpV10X] = None
    AbpV1_1: Optional[UpdateAbpV11] = None
    DeviceProfileId_1: Optional[DeviceProfileId] = Field(None, alias='DeviceProfileId')
    FPorts: Optional[UpdateFPorts] = None
    ServiceProfileId_1: Optional[ServiceProfileId] = Field(
        None, alias='ServiceProfileId'
    )


class LteNmrList(RootModel[List[LteNmrObj]]):
    root: List[LteNmrObj] = Field(..., max_length=32, min_length=1)


class LteObj(BaseModel):
    EutranCid_1: EutranCid = Field(..., alias='EutranCid')
    LteLocalId_1: Optional[LteLocalId] = Field(None, alias='LteLocalId')
    LteNmr: Optional[LteNmrList] = None
    LteTimingAdvance_1: Optional[LteTimingAdvance] = Field(
        None, alias='LteTimingAdvance'
    )
    Mcc: MCC
    Mnc: MNC
    NrCapable: Optional[NRCapable] = None
    Rsrp: Optional[RSRP] = None
    Rsrq: Optional[RSRQ] = None
    Tac: Optional[TAC] = None


class ParticipatingGateways(BaseModel):
    DownlinkMode_1: DownlinkMode = Field(..., alias='DownlinkMode')
    GatewayList_1: GatewayList = Field(..., alias='GatewayList')
    TransmissionInterval_1: TransmissionInterval = Field(
        ..., alias='TransmissionInterval'
    )


class PositionConfigurationItem(BaseModel):
    Destination: Optional[DestinationName] = None
    ResourceIdentifier: Optional[PositionResourceIdentifier] = None
    ResourceType: Optional[PositionResourceType] = None
    Solvers: Optional[PositionSolverDetails] = None


class PositionConfigurationList(RootModel[List[PositionConfigurationItem]]):
    root: List[PositionConfigurationItem]


class StartBulkAssociateWirelessDeviceWithMulticastGroupRequest(BaseModel):
    QueryString_1: Optional[QueryString] = Field(None, alias='QueryString')
    Tags: Optional[TagList] = None


class StartBulkDisassociateWirelessDeviceFromMulticastGroupRequest(BaseModel):
    QueryString_1: Optional[QueryString] = Field(None, alias='QueryString')
    Tags: Optional[TagList] = None


class StartSingleWirelessDeviceImportTaskRequest(BaseModel):
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    DestinationName_1: DestinationName = Field(..., alias='DestinationName')
    DeviceName_1: Optional[DeviceName] = Field(None, alias='DeviceName')
    Sidewalk: SidewalkSingleStartImportInfo
    Tags: Optional[TagList] = None


class StartWirelessDeviceImportTaskRequest(BaseModel):
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    DestinationName_1: DestinationName = Field(..., alias='DestinationName')
    Sidewalk: SidewalkStartImportInfo
    Tags: Optional[TagList] = None


class TdscdmaNmrList(RootModel[List[TdscdmaNmrObj]]):
    root: List[TdscdmaNmrObj] = Field(..., max_length=32, min_length=1)


class TdscdmaObj(BaseModel):
    Lac: Optional[LAC] = None
    Mcc: MCC
    Mnc: MNC
    PathLoss_1: Optional[PathLoss] = Field(None, alias='PathLoss')
    Rscp: Optional[RSCP] = None
    TdscdmaLocalId_1: Optional[TdscdmaLocalId] = Field(None, alias='TdscdmaLocalId')
    TdscdmaNmr: Optional[TdscdmaNmrList] = None
    TdscdmaTimingAdvance_1: Optional[TdscdmaTimingAdvance] = Field(
        None, alias='TdscdmaTimingAdvance'
    )
    UtranCid_1: UtranCid = Field(..., alias='UtranCid')


class UpdateLogLevelsByResourceTypesRequest(BaseModel):
    DefaultLogLevel: Optional[LogLevel] = None
    WirelessDeviceLogOptions: Optional[WirelessDeviceLogOptionList] = None
    WirelessGatewayLogOptions: Optional[WirelessGatewayLogOptionList] = None


class UpdateWirelessDeviceRequest(BaseModel):
    Description_1: Optional[Description] = Field(None, alias='Description')
    DestinationName_1: Optional[DestinationName] = Field(None, alias='DestinationName')
    LoRaWAN: Optional[LoRaWANUpdateDevice] = None
    Name: Optional[WirelessDeviceName] = None
    Positioning: Optional[PositioningConfigStatus] = None


class WcdmaList(RootModel[List[WcdmaObj]]):
    root: List[WcdmaObj] = Field(..., max_length=16, min_length=1)


class WirelessGatewayStatistics(BaseModel):
    Arn: Optional[WirelessGatewayArn] = None
    Description_1: Optional[Description] = Field(None, alias='Description')
    Id: Optional[WirelessGatewayId] = None
    LastUplinkReceivedAt: Optional[ISODateTimeString] = None
    LoRaWAN: Optional[LoRaWANGateway] = None
    Name: Optional[WirelessGatewayName] = None


class WirelessGatewayStatisticsList(RootModel[List[WirelessGatewayStatistics]]):
    root: List[WirelessGatewayStatistics]


class LoRaWAN10(BaseModel):
    Beaconing_1: Optional[Beaconing] = Field(None, alias='Beaconing')
    GatewayEui_1: Optional[GatewayEui] = Field(None, alias='GatewayEui')
    JoinEuiFilters_1: Optional[JoinEuiFilters] = Field(None, alias='JoinEuiFilters')
    MaxEirp: Optional[GatewayMaxEirp] = None
    NetIdFilters_1: Optional[NetIdFilters] = Field(None, alias='NetIdFilters')
    RfRegion_1: Optional[RfRegion] = Field(None, alias='RfRegion')
    SubBands_1: Optional[SubBands] = Field(None, alias='SubBands')


class WirelessGatewaysPostRequest(BaseModel):
    ClientRequestToken: Optional[
        constr(pattern=r'^[a-zA-Z0-9-_]+$', min_length=1, max_length=64)
    ] = Field(
        None,
        description='Each resource must have a unique client request token. If you try to create a new resource with the same token as a resource that already exists, an exception occurs. If you omit this value, AWS SDKs will automatically generate a unique client request.',
    )
    Description: Optional[constr(max_length=2048)] = Field(
        None, description='The description of the new resource.'
    )
    LoRaWAN: LoRaWAN10 = Field(..., description='LoRaWANGateway object.')
    Name: Optional[constr(max_length=256)] = Field(
        None, description='The name of the new resource.'
    )
    Tags: Optional[List[Tag]] = Field(
        None,
        description='The tag to attach to the specified resource. Tags are metadata that you can use to manage a resource.',
        max_length=200,
        min_length=0,
    )


class CdmaList(RootModel[List[CdmaObj]]):
    root: List[CdmaObj] = Field(..., max_length=16, min_length=1)


class CreateWirelessGatewayRequest(BaseModel):
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    Description_1: Optional[Description] = Field(None, alias='Description')
    LoRaWAN: LoRaWANGateway
    Name: Optional[WirelessGatewayName] = None
    Tags: Optional[TagList] = None


class EventConfigurationItem(BaseModel):
    Events: Optional[EventNotificationItemConfigurations] = None
    Identifier_1: Optional[Identifier] = Field(None, alias='Identifier')
    IdentifierType_1: Optional[IdentifierType] = Field(None, alias='IdentifierType')
    PartnerType: Optional[EventNotificationPartnerType] = None


class EventConfigurationsList(RootModel[List[EventConfigurationItem]]):
    root: List[EventConfigurationItem]


class GetWirelessGatewayFirmwareInformationResponse(BaseModel):
    LoRaWAN: Optional[LoRaWANGatewayCurrentVersion] = None


class GetWirelessGatewayResponse(BaseModel):
    Arn: Optional[WirelessGatewayArn] = None
    Description_1: Optional[Description] = Field(None, alias='Description')
    Id: Optional[WirelessGatewayId] = None
    LoRaWAN: Optional[LoRaWANGateway] = None
    Name: Optional[WirelessGatewayName] = None
    ThingArn_1: Optional[ThingArn] = Field(None, alias='ThingArn')
    ThingName_1: Optional[ThingName] = Field(None, alias='ThingName')


class GsmList(RootModel[List[GsmObj]]):
    root: List[GsmObj] = Field(..., max_length=16, min_length=1)


class ListEventConfigurationsResponse(BaseModel):
    EventConfigurationsList_1: Optional[EventConfigurationsList] = Field(
        None, alias='EventConfigurationsList'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListPositionConfigurationsResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    PositionConfigurationList_1: Optional[PositionConfigurationList] = Field(
        None, alias='PositionConfigurationList'
    )


class ListWirelessGatewaysResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    WirelessGatewayList: Optional[WirelessGatewayStatisticsList] = None


class LoRaWANSendDataToDevice(BaseModel):
    FPort_1: Optional[FPort] = Field(None, alias='FPort')
    ParticipatingGateways_1: Optional[ParticipatingGateways] = Field(
        None, alias='ParticipatingGateways'
    )


class LteList(RootModel[List[LteObj]]):
    root: List[LteObj] = Field(..., max_length=16, min_length=1)


class TdscdmaList(RootModel[List[TdscdmaObj]]):
    root: List[TdscdmaObj] = Field(..., max_length=16, min_length=1)


class WirelessMetadata(BaseModel):
    LoRaWAN: Optional[LoRaWANSendDataToDevice] = None
    Sidewalk: Optional[SidewalkSendDataToDevice] = None


class CellTowers(BaseModel):
    Cdma: Optional[CdmaList] = None
    Gsm: Optional[GsmList] = None
    Lte: Optional[LteList] = None
    Tdscdma: Optional[TdscdmaList] = None
    Wcdma: Optional[WcdmaList] = None


class PositionEstimatePostRequest(BaseModel):
    CellTowers_1: Optional[CellTowers] = Field(
        None,
        alias='CellTowers',
        description='The cell towers that were used to perform the measurements.',
    )
    Gnss: Optional[Gnss1] = Field(
        None,
        description='Global navigation satellite system (GNSS) object used for positioning.',
    )
    Ip: Optional[Ip1] = Field(
        None, description='IP address used for resolving device location.'
    )
    Timestamp: Optional[datetime] = Field(
        None,
        description='Optional information that specifies the time when the position information will be resolved. It uses the Unix timestamp format. If not specified, the time at which the request was received will be used.',
    )
    WiFiAccessPoints: Optional[List[WiFiAccessPoint]] = Field(
        None,
        description="Retrieves an estimated device position by resolving WLAN measurement data. The position is resolved using HERE's Wi-Fi based solver.",
    )


class WirelessDevicesIdDataPostRequest(BaseModel):
    PayloadData: constr(
        pattern=r'^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$',
        max_length=2048,
    ) = Field(
        ..., description='The binary to be sent to the end device, encoded in base64.'
    )
    TransmitMode: conint(ge=0, le=1) = Field(
        ...,
        description='The transmit mode to use to send data to the wireless device. Can be: <code>0</code> for UM (unacknowledge mode) or <code>1</code> for AM (acknowledge mode).',
    )
    WirelessMetadata_1: Optional[WirelessMetadata] = Field(
        None, alias='WirelessMetadata', description='WirelessMetadata object.'
    )


class DownlinkQueueMessage(BaseModel):
    LoRaWAN: Optional[LoRaWANSendDataToDevice] = None
    MessageId_1: Optional[MessageId] = Field(None, alias='MessageId')
    ReceivedAt: Optional[ISODateTimeString] = None
    TransmitMode_1: Optional[TransmitMode] = Field(None, alias='TransmitMode')


class DownlinkQueueMessagesList(RootModel[List[DownlinkQueueMessage]]):
    root: List[DownlinkQueueMessage]


class GetPositionEstimateRequest(BaseModel):
    CellTowers_1: Optional[CellTowers] = Field(None, alias='CellTowers')
    Gnss_1: Optional[Gnss] = Field(None, alias='Gnss')
    Ip_1: Optional[Ip] = Field(None, alias='Ip')
    Timestamp: Optional[CreationDate] = None
    WiFiAccessPoints_1: Optional[WiFiAccessPoints] = Field(
        None, alias='WiFiAccessPoints'
    )


class ListQueuedMessagesResponse(BaseModel):
    DownlinkQueueMessagesList_1: Optional[DownlinkQueueMessagesList] = Field(
        None, alias='DownlinkQueueMessagesList'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class SendDataToWirelessDeviceRequest(BaseModel):
    PayloadData_1: PayloadData = Field(..., alias='PayloadData')
    TransmitMode_1: TransmitMode = Field(..., alias='TransmitMode')
    WirelessMetadata_1: Optional[WirelessMetadata] = Field(
        None, alias='WirelessMetadata'
    )
